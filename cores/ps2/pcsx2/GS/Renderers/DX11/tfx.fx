char tfx_fx_shader_raw[] = 
"#define FMT_32 0\n"
"#define FMT_24 1\n"
"#define FMT_16 2\n"
"\n"
"#define SHUFFLE_READ  1\n"
"#define SHUFFLE_WRITE 2\n"
"#define SHUFFLE_READWRITE 3\n"
"\n"
"#ifndef VS_TME\n"
"#define VS_IIP 0\n"
"#define VS_TME 1\n"
"#define VS_FST 1\n"
"#endif\n"
"\n"
"#ifndef GS_IIP\n"
"#define GS_IIP 0\n"
"#define GS_PRIM 3\n"
"#define GS_FORWARD_PRIMID 0\n"
"#endif\n"
"\n"
"#ifndef PS_FST\n"
"#define PS_IIP 0\n"
"#define PS_FST 0\n"
"#define PS_WMS 0\n"
"#define PS_WMT 0\n"
"#define PS_ADJS 0\n"
"#define PS_ADJT 0\n"
"#define PS_AEM_FMT FMT_32\n"
"#define PS_AEM 0\n"
"#define PS_TFX 0\n"
"#define PS_TCC 1\n"
"#define PS_ATST 1\n"
"#define PS_FOG 0\n"
"#define PS_IIP 0\n"
"#define PS_BLEND_HW 0\n"
"#define PS_A_MASKED 0\n"
"#define PS_FBA 0\n"
"#define PS_FBMASK 0\n"
"#define PS_LTF 1\n"
"#define PS_TCOFFSETHACK 0\n"
"#define PS_POINT_SAMPLER 0\n"
"#define PS_REGION_RECT 0\n"
"#define PS_SHUFFLE 0\n"
"#define PS_SHUFFLE_SAME 0\n"
"#define PS_PROCESS_BA 0\n"
"#define PS_PROCESS_RG 0\n"
"#define PS_SHUFFLE_ACROSS 0\n"
"#define PS_READ16_SRC 0\n"
"#define PS_DST_FMT 0\n"
"#define PS_DEPTH_FMT 0\n"
"#define PS_PAL_FMT 0\n"
"#define PS_CHANNEL_FETCH 0\n"
"#define PS_TALES_OF_ABYSS_HLE 0\n"
"#define PS_URBAN_CHAOS_HLE 0\n"
"#define PS_HDR 0\n"
"#define PS_RTA_CORRECTION 0\n"
"#define PS_RTA_SRC_CORRECTION 0\n"
"#define PS_COLCLIP 0\n"
"#define PS_BLEND_A 0\n"
"#define PS_BLEND_B 0\n"
"#define PS_BLEND_C 0\n"
"#define PS_BLEND_D 0\n"
"#define PS_BLEND_MIX 0\n"
"#define PS_ROUND_INV 0\n"
"#define PS_FIXED_ONE_A 0\n"
"#define PS_PABE 0\n"
"#define PS_DITHER 0\n"
"#define PS_DITHER_ADJUST 0\n"
"#define PS_ZCLAMP 0\n"
"#define PS_SCANMSK 0\n"
"#define PS_AUTOMATIC_LOD 0\n"
"#define PS_MANUAL_LOD 0\n"
"#define PS_TEX_IS_FB 0\n"
"#define PS_NO_COLOR 0\n"
"#define PS_NO_COLOR1 0\n"
"#define PS_DATE 0\n"
"#endif\n"
"\n"
"#define SW_BLEND (PS_BLEND_A || PS_BLEND_B || PS_BLEND_D)\n"
"#define SW_BLEND_NEEDS_RT (SW_BLEND && (PS_BLEND_A == 1 || PS_BLEND_B == 1 || PS_BLEND_C == 1 || PS_BLEND_D == 1))\n"
"#define SW_AD_TO_HW (PS_BLEND_C == 1 && PS_A_MASKED)\n"
"\n"
"struct VS_INPUT\n"
"{\n"
"	float2 st : TEXCOORD0;\n"
"	uint4 c : COLOR0;\n"
"	float q : TEXCOORD1;\n"
"	uint2 p : POSITION0;\n"
"	uint z : POSITION1;\n"
"	uint2 uv : TEXCOORD2;\n"
"	float4 f : COLOR1;\n"
"};\n"
"\n"
"struct VS_OUTPUT\n"
"{\n"
"	float4 p : SV_Position;\n"
"	float4 t : TEXCOORD0;\n"
"	float4 ti : TEXCOORD2;\n"
"\n"
"#if VS_IIP != 0 || GS_IIP != 0 || PS_IIP != 0\n"
"	float4 c : COLOR0;\n"
"#else\n"
"	nointerpolation float4 c : COLOR0;\n"
"#endif\n"
"};\n"
"\n"
"struct PS_INPUT\n"
"{\n"
"	float4 p : SV_Position;\n"
"	float4 t : TEXCOORD0;\n"
"	float4 ti : TEXCOORD2;\n"
"#if VS_IIP != 0 || GS_IIP != 0 || PS_IIP != 0\n"
"	float4 c : COLOR0;\n"
"#else\n"
"	nointerpolation float4 c : COLOR0;\n"
"#endif\n"
"#if (PS_DATE >= 1 && PS_DATE <= 3) || GS_FORWARD_PRIMID\n"
"	uint primid : SV_PrimitiveID;\n"
"#endif\n"
"};\n"
"\n"
"#ifdef PIXEL_SHADER\n"
"\n"
"struct PS_OUTPUT\n"
"{\n"
"#if !PS_NO_COLOR\n"
"#if PS_DATE == 1 || PS_DATE == 2\n"
"	float c : SV_Target;\n"
"#else\n"
"	float4 c0 : SV_Target0;\n"
"#if !PS_NO_COLOR1\n"
"	float4 c1 : SV_Target1;\n"
"#endif\n"
"#endif\n"
"#endif\n"
"#if PS_ZCLAMP\n"
"	float depth : SV_Depth;\n"
"#endif\n"
"};\n"
"\n"
"Texture2D<float4> Texture : register(t0);\n"
"Texture2D<float4> Palette : register(t1);\n"
"Texture2D<float4> RtTexture : register(t2);\n"
"Texture2D<float> PrimMinTexture : register(t3);\n"
"SamplerState TextureSampler : register(s0);\n"
"\n"
"#ifdef DX12\n"
"cbuffer cb1 : register(b1)\n"
"#else\n"
"cbuffer cb1\n"
"#endif\n"
"{\n"
"	float3 FogColor;\n"
"	float AREF;\n"
"	float4 WH;\n"
"	float2 TA;\n"
"	float MaxDepthPS;\n"
"	float Af;\n"
"	uint4 FbMask;\n"
"	float4 HalfTexel;\n"
"	float4 MinMax;\n"
"	float4 LODParams;\n"
"	float4 STRange;\n"
"	int4 ChannelShuffle;\n"
"	float2 TC_OffsetHack;\n"
"	float2 STScale;\n"
"	float4x4 DitherMatrix;\n"
"	float ScaledScaleFactor;\n"
"	float RcpScaleFactor;\n"
"};\n"
"\n"
"float4 sample_c(float2 uv, float uv_w)\n"
"{\n"
"#if PS_TEX_IS_FB == 1\n"
"	return RtTexture.Load(int3(int2(uv * WH.zw), 0));\n"
"#elif PS_REGION_RECT == 1\n"
"	return Texture.Load(int3(int2(uv), 0));\n"
"#else\n"
"	if (PS_POINT_SAMPLER)\n"
"	{\n"
"		// Weird issue with ATI/AMD cards,\n"
"		// it looks like they add 127/128 of a texel to sampling coordinates\n"
"		// occasionally causing point sampling to erroneously round up.\n"
"		// I'm manually adjusting coordinates to the centre of texels here,\n"
"		// though the centre is just paranoia, the top left corner works fine.\n"
"		// As of 2018 this issue is still present.\n"
"		uv = (trunc(uv * WH.zw) + float2(0.5, 0.5)) / WH.zw;\n"
"	}\n"
"#if !PS_ADJS && !PS_ADJT\n"
"	uv *= STScale;\n"
"#else\n"
"	#if PS_ADJS\n"
"		uv.x = (uv.x - STRange.x) * STRange.z;\n"
"	#else\n"
"		uv.x = uv.x * STScale.x;\n"
"	#endif\n"
"	#if PS_ADJT\n"
"		uv.y = (uv.y - STRange.y) * STRange.w;\n"
"	#else\n"
"		uv.y = uv.y * STScale.y;\n"
"	#endif\n"
"#endif\n"
"\n"
"#if PS_AUTOMATIC_LOD == 1\n"
"	return Texture.Sample(TextureSampler, uv);\n"
"#elif PS_MANUAL_LOD == 1\n"
"	// FIXME add LOD: K - ( LOG2(Q) * (1 << L))\n"
"	float K = LODParams.x;\n"
"	float L = LODParams.y;\n"
"	float bias = LODParams.z;\n"
"	float max_lod = LODParams.w;\n"
"\n"
"	float gs_lod = K - log2(abs(uv_w)) * L;\n"
"	// FIXME max useful ?\n"
"	//float lod = max(min(gs_lod, max_lod) - bias, 0.0f);\n"
"	float lod = min(gs_lod, max_lod) - bias;\n"
"\n"
"	return Texture.SampleLevel(TextureSampler, uv, lod);\n"
"#else\n"
"	return Texture.SampleLevel(TextureSampler, uv, 0); // No lod\n"
"#endif\n"
"#endif\n"
"}\n"
"\n"
"float4 sample_p(uint u)\n"
"{\n"
"	return Palette.Load(int3(int(u), 0, 0));\n"
"}\n"
"\n"
"float4 sample_p_norm(float u)\n"
"{\n"
"	return sample_p(uint(u * 255.5f));\n"
"}\n"
"\n"
"float4 clamp_wrap_uv(float4 uv)\n"
"{\n"
"	float4 tex_size = WH.xyxy;\n"
"\n"
"	if(PS_WMS == PS_WMT)\n"
"	{\n"
"		if(PS_REGION_RECT != 0 && PS_WMS == 0)\n"
"		{\n"
"			uv = frac(uv);\n"
"		}\n"
"		else if(PS_REGION_RECT != 0 && PS_WMS == 1)\n"
"		{\n"
"			uv = saturate(uv);\n"
"		}\n"
"		else if(PS_WMS == 2)\n"
"		{\n"
"			uv = clamp(uv, MinMax.xyxy, MinMax.zwzw);\n"
"		}\n"
"		else if(PS_WMS == 3)\n"
"		{\n"
"			#if PS_FST == 0\n"
"			// wrap negative uv coords to avoid an off by one error that shifted\n"
"			// textures. Fixes Xenosaga's hair issue.\n"
"			uv = frac(uv);\n"
"			#endif\n"
"			uv = (float4)(((uint4)(uv * tex_size) & asuint(MinMax.xyxy)) | asuint(MinMax.zwzw)) / tex_size;\n"
"		}\n"
"	}\n"
"	else\n"
"	{\n"
"		if(PS_REGION_RECT != 0 && PS_WMS == 0)\n"
"		{\n"
"			uv.xz = frac(uv.xz);\n"
"		}\n"
"		else if(PS_REGION_RECT != 0 && PS_WMS == 1)\n"
"		{\n"
"			uv.xz = saturate(uv.xz);\n"
"		}\n"
"		else if(PS_WMS == 2)\n"
"		{\n"
"			uv.xz = clamp(uv.xz, MinMax.xx, MinMax.zz);\n"
"		}\n"
"		else if(PS_WMS == 3)\n"
"		{\n"
"			#if PS_FST == 0\n"
"			uv.xz = frac(uv.xz);\n"
"			#endif\n"
"			uv.xz = (float2)(((uint2)(uv.xz * tex_size.xx) & asuint(MinMax.xx)) | asuint(MinMax.zz)) / tex_size.xx;\n"
"		}\n"
"		if(PS_REGION_RECT != 0 && PS_WMT == 0)\n"
"		{\n"
"			uv.yw = frac(uv.yw);\n"
"		}\n"
"		else if(PS_REGION_RECT != 0 && PS_WMT == 1)\n"
"		{\n"
"			uv.yw = saturate(uv.yw);\n"
"		}\n"
"		else if(PS_WMT == 2)\n"
"		{\n"
"			uv.yw = clamp(uv.yw, MinMax.yy, MinMax.ww);\n"
"		}\n"
"		else if(PS_WMT == 3)\n"
"		{\n"
"			#if PS_FST == 0\n"
"			uv.yw = frac(uv.yw);\n"
"			#endif\n"
"			uv.yw = (float2)(((uint2)(uv.yw * tex_size.yy) & asuint(MinMax.yy)) | asuint(MinMax.ww)) / tex_size.yy;\n"
"		}\n"
"	}\n"
"\n"
"	if(PS_REGION_RECT != 0)\n"
"	{\n"
"		// Normalized -> Integer Coordinates.\n"
"		uv = clamp(uv * WH.zwzw + STRange.xyxy, STRange.xyxy, STRange.zwzw);\n"
"	}\n"
"\n"
"	return uv;\n"
"}\n"
"\n"
"float4x4 sample_4c(float4 uv, float uv_w)\n"
"{\n"
"	float4x4 c;\n"
"\n"
"	c[0] = sample_c(uv.xy, uv_w);\n"
"	c[1] = sample_c(uv.zy, uv_w);\n"
"	c[2] = sample_c(uv.xw, uv_w);\n"
"	c[3] = sample_c(uv.zw, uv_w);\n"
"\n"
"	return c;\n"
"}\n"
"\n"
"uint4 sample_4_index(float4 uv, float uv_w)\n"
"{\n"
"	float4 c;\n"
"\n"
"	c.x = sample_c(uv.xy, uv_w).a;\n"
"	c.y = sample_c(uv.zy, uv_w).a;\n"
"	c.z = sample_c(uv.xw, uv_w).a;\n"
"	c.w = sample_c(uv.zw, uv_w).a;\n"
"\n"
"	// Denormalize value\n"
"	uint4 i;\n"
"		\n"
"	if (PS_RTA_SRC_CORRECTION)\n"
"	{\n"
"		i = uint4(round(c * 128.25f)); // Denormalize value\n"
"	}\n"
"	else\n"
"	{\n"
"		i = uint4(c * 255.5f); // Denormalize value\n"
"	}\n"
"\n"
"	if (PS_PAL_FMT == 1)\n"
"	{\n"
"		// 4HL\n"
"		return i & 0xFu;\n"
"	}\n"
"	else if (PS_PAL_FMT == 2)\n"
"	{\n"
"		// 4HH\n"
"		return i >> 4u;\n"
"	}\n"
"	else\n"
"	{\n"
"		// 8\n"
"		return i;\n"
"	}\n"
"}\n"
"\n"
"float4x4 sample_4p(uint4 u)\n"
"{\n"
"	float4x4 c;\n"
"\n"
"	c[0] = sample_p(u.x);\n"
"	c[1] = sample_p(u.y);\n"
"	c[2] = sample_p(u.z);\n"
"	c[3] = sample_p(u.w);\n"
"\n"
"	return c;\n"
"}\n"
"\n"
"int fetch_raw_depth(int2 xy)\n"
"{\n"
"#if PS_TEX_IS_FB == 1\n"
"	float4 col = RtTexture.Load(int3(xy, 0));\n"
"#else\n"
"	float4 col = Texture.Load(int3(xy, 0));\n"
"#endif\n"
"	return (int)(col.r * exp2(32.0f));\n"
"}\n"
"\n"
"float4 fetch_raw_color(int2 xy)\n"
"{\n"
"#if PS_TEX_IS_FB == 1\n"
"	return RtTexture.Load(int3(xy, 0));\n"
"#else\n"
"	return Texture.Load(int3(xy, 0));\n"
"#endif\n"
"}\n"
"\n"
"float4 fetch_c(int2 uv)\n"
"{\n"
"	return Texture.Load(int3(uv, 0));\n"
"}\n"
"\n"
"//////////////////////////////////////////////////////////////////////\n"
"// Depth sampling\n"
"//////////////////////////////////////////////////////////////////////\n"
"\n"
"int2 clamp_wrap_uv_depth(int2 uv)\n"
"{\n"
"	int4 mask = asint(MinMax) << 4;\n"
"	if (PS_WMS == PS_WMT)\n"
"	{\n"
"		if (PS_WMS == 2)\n"
"		{\n"
"			uv = clamp(uv, mask.xy, mask.zw);\n"
"		}\n"
"		else if (PS_WMS == 3)\n"
"		{\n"
"			uv = (uv & mask.xy) | mask.zw;\n"
"		}\n"
"	}\n"
"	else\n"
"	{\n"
"		if (PS_WMS == 2)\n"
"		{\n"
"			uv.x = clamp(uv.x, mask.x, mask.z);\n"
"		}\n"
"		else if (PS_WMS == 3)\n"
"		{\n"
"			uv.x = (uv.x & mask.x) | mask.z;\n"
"		}\n"
"		if (PS_WMT == 2)\n"
"		{\n"
"			uv.y = clamp(uv.y, mask.y, mask.w);\n"
"		}\n"
"		else if (PS_WMT == 3)\n"
"		{\n"
"			uv.y = (uv.y & mask.y) | mask.w;\n"
"		}\n"
"	}\n"
"	return uv;\n"
"}\n"
"\n"
"float4 sample_depth(float2 st, float2 pos)\n"
"{\n"
"	float2 uv_f = (float2)clamp_wrap_uv_depth(int2(st)) * (float2)ScaledScaleFactor;\n"
"\n"
"#if PS_REGION_RECT == 1\n"
"	uv_f = clamp(uv_f + STRange.xy, STRange.xy, STRange.zw);\n"
"#endif\n"
"\n"
"	int2 uv = (int2)uv_f;\n"
"	float4 t = (float4)(0.0f);\n"
"\n"
"	if (PS_TALES_OF_ABYSS_HLE == 1)\n"
"	{\n"
"		// Warning: UV can't be used in channel effect\n"
"		int depth = fetch_raw_depth(pos);\n"
"\n"
"		// Convert msb based on the palette\n"
"		t = Palette.Load(int3((depth >> 8) & 0xFF, 0, 0)) * 255.0f;\n"
"	}\n"
"	else if (PS_URBAN_CHAOS_HLE == 1)\n"
"	{\n"
"		// Depth buffer is read as a RGB5A1 texture. The game try to extract the green channel.\n"
"		// So it will do a first channel trick to extract lsb, value is right-shifted.\n"
"		// Then a new channel trick to extract msb which will shifted to the left.\n"
"		// OpenGL uses a FLOAT32 format for the depth so it requires a couple of conversion.\n"
"		// To be faster both steps (msb&lsb) are done in a single pass.\n"
"\n"
"		// Warning: UV can't be used in channel effect\n"
"		int depth = fetch_raw_depth(pos);\n"
"\n"
"		// Convert lsb based on the palette\n"
"		t = Palette.Load(int3(depth & 0xFF, 0, 0)) * 255.0f;\n"
"\n"
"		// Msb is easier\n"
"		float green = (float)((depth >> 8) & 0xFF) * 36.0f;\n"
"		green = min(green, 255.0f);\n"
"		t.g += green;\n"
"	}\n"
"	else if (PS_DEPTH_FMT == 1)\n"
"	{\n"
"		// Based on ps_convert_float32_rgba8 of convert\n"
"\n"
"		// Convert a FLOAT32 depth texture into a RGBA color texture\n"
"		uint d = uint(fetch_c(uv).r * exp2(32.0f));\n"
"		t = float4(uint4((d & 0xFFu), ((d >> 8) & 0xFFu), ((d >> 16) & 0xFFu), (d >> 24)));\n"
"	}\n"
"	else if (PS_DEPTH_FMT == 2)\n"
"	{\n"
"		// Based on ps_convert_float16_rgb5a1 of convert\n"
"\n"
"		// Convert a FLOAT32 (only 16 lsb) depth into a RGB5A1 color texture\n"
"		uint d = uint(fetch_c(uv).r * exp2(32.0f));\n"
"		t = float4(uint4((d & 0x1Fu), ((d >> 5) & 0x1Fu), ((d >> 10) & 0x1Fu), (d >> 15) & 0x01u)) * float4(8.0f, 8.0f, 8.0f, 128.0f);\n"
"	}\n"
"	else if (PS_DEPTH_FMT == 3)\n"
"	{\n"
"		// Convert a RGBA/RGB5A1 color texture into a RGBA/RGB5A1 color texture\n"
"		t = fetch_c(uv) * 255.0f;\n"
"	}\n"
"\n"
"	if (PS_AEM_FMT == FMT_24)\n"
"	{\n"
"		t.a = ((PS_AEM == 0) || any(bool3(t.rgb))) ? 255.0f * TA.x : 0.0f;\n"
"	}\n"
"	else if (PS_AEM_FMT == FMT_16)\n"
"	{\n"
"		t.a = t.a >= 128.0f ? 255.0f * TA.y : ((PS_AEM == 0) || any(bool3(t.rgb))) ? 255.0f * TA.x : 0.0f;\n"
"	}\n"
"	else if (PS_PAL_FMT != 0 && !PS_TALES_OF_ABYSS_HLE && !PS_URBAN_CHAOS_HLE)\n"
"	{\n"
"		t = trunc(sample_4p(uint4(t.aaaa))[0] * 255.0f + 0.05f);\n"
"	}\n"
"\n"
"	return t;\n"
"}\n"
"\n"
"//////////////////////////////////////////////////////////////////////\n"
"// Fetch a Single Channel\n"
"//////////////////////////////////////////////////////////////////////\n"
"\n"
"float4 fetch_red(int2 xy)\n"
"{\n"
"	float4 rt;\n"
"\n"
"	if ((PS_DEPTH_FMT == 1) || (PS_DEPTH_FMT == 2))\n"
"	{\n"
"		int depth = (fetch_raw_depth(xy)) & 0xFF;\n"
"		rt = (float4)(depth) / 255.0f;\n"
"	}\n"
"	else\n"
"	{\n"
"		rt = fetch_raw_color(xy);\n"
"	}\n"
"\n"
"	return sample_p_norm(rt.r) * 255.0f;\n"
"}\n"
"\n"
"float4 fetch_green(int2 xy)\n"
"{\n"
"	float4 rt;\n"
"\n"
"	if ((PS_DEPTH_FMT == 1) || (PS_DEPTH_FMT == 2))\n"
"	{\n"
"		int depth = (fetch_raw_depth(xy) >> 8) & 0xFF;\n"
"		rt = (float4)(depth) / 255.0f;\n"
"	}\n"
"	else\n"
"	{\n"
"		rt = fetch_raw_color(xy);\n"
"	}\n"
"\n"
"	return sample_p_norm(rt.g) * 255.0f;\n"
"}\n"
"\n"
"float4 fetch_blue(int2 xy)\n"
"{\n"
"	float4 rt;\n"
"\n"
"	if ((PS_DEPTH_FMT == 1) || (PS_DEPTH_FMT == 2))\n"
"	{\n"
"		int depth = (fetch_raw_depth(xy) >> 16) & 0xFF;\n"
"		rt = (float4)(depth) / 255.0f;\n"
"	}\n"
"	else\n"
"	{\n"
"		rt = fetch_raw_color(xy);\n"
"	}\n"
"\n"
"	return sample_p_norm(rt.b) * 255.0f;\n"
"}\n"
"\n"
"float4 fetch_alpha(int2 xy)\n"
"{\n"
"	float4 rt = fetch_raw_color(xy);\n"
"	return sample_p_norm(rt.a) * 255.0f;\n"
"}\n"
"\n"
"float4 fetch_rgb(int2 xy)\n"
"{\n"
"	float4 rt = fetch_raw_color(xy);\n"
"	float4 c = float4(sample_p_norm(rt.r).r, sample_p_norm(rt.g).g, sample_p_norm(rt.b).b, 1.0);\n"
"	return c * 255.0f;\n"
"}\n"
"\n"
"float4 fetch_gXbY(int2 xy)\n"
"{\n"
"	if ((PS_DEPTH_FMT == 1) || (PS_DEPTH_FMT == 2))\n"
"	{\n"
"		int depth = fetch_raw_depth(xy);\n"
"		int bg = (depth >> (8 + ChannelShuffle.w)) & 0xFF;\n"
"		return (float4)(bg);\n"
"	}\n"
"	else\n"
"	{\n"
"		int4 rt = (int4)(fetch_raw_color(xy) * 255.0);\n"
"		int green = (rt.g >> ChannelShuffle.w) & ChannelShuffle.z;\n"
"		int blue = (rt.b << ChannelShuffle.y) & ChannelShuffle.x;\n"
"		return (float4)(green | blue);\n"
"	}\n"
"}\n"
"\n"
"float4 sample_color(float2 st, float uv_w)\n"
"{\n"
"	#if PS_TCOFFSETHACK\n"
"	st += TC_OffsetHack.xy;\n"
"	#endif\n"
"\n"
"	float4 t;\n"
"	float4x4 c;\n"
"	float2 dd;\n"
"\n"
"	if (PS_LTF == 0 && PS_AEM_FMT == FMT_32 && PS_PAL_FMT == 0 && PS_REGION_RECT == 0 && PS_WMS < 2 && PS_WMT < 2)\n"
"	{\n"
"		c[0] = sample_c(st, uv_w);\n"
"	}\n"
"	else\n"
"	{\n"
"		float4 uv;\n"
"\n"
"		if(PS_LTF)\n"
"		{\n"
"			uv = st.xyxy + HalfTexel;\n"
"			dd = frac(uv.xy * WH.zw);\n"
"\n"
"			if(PS_FST == 0)\n"
"			{\n"
"				dd = clamp(dd, (float2)0.0f, (float2)0.9999999f);\n"
"			}\n"
"		}\n"
"		else\n"
"		{\n"
"			uv = st.xyxy;\n"
"		}\n"
"\n"
"		uv = clamp_wrap_uv(uv);\n"
"\n"
"#if PS_PAL_FMT != 0\n"
"			c = sample_4p(sample_4_index(uv, uv_w));\n"
"#else\n"
"			c = sample_4c(uv, uv_w);\n"
"#endif\n"
"	}\n"
"\n"
"	[unroll]\n"
"	for (uint i = 0; i < 4; i++)\n"
"	{\n"
"		if(PS_AEM_FMT == FMT_24)\n"
"		{\n"
"			c[i].a = !PS_AEM || any(c[i].rgb) ? TA.x : 0;\n"
"		}\n"
"		else if(PS_AEM_FMT == FMT_16)\n"
"		{\n"
"			c[i].a = c[i].a >= 0.5 ? TA.y : !PS_AEM || any(int3(c[i].rgb * 255.0f) & 0xF8) ? TA.x : 0;\n"
"		}\n"
"	}\n"
"\n"
"	if(PS_LTF)\n"
"	{\n"
"		t = lerp(lerp(c[0], c[1], dd.x), lerp(c[2], c[3], dd.x), dd.y);\n"
"	}\n"
"	else\n"
"	{\n"
"		t = c[0];\n"
"	}\n"
"\n"
"	if (PS_AEM_FMT == FMT_32 && PS_PAL_FMT == 0 && PS_RTA_SRC_CORRECTION)\n"
"		t.a = t.a * (128.5f / 255.0f);\n"
"			\n"
"	return trunc(t * 255.0f + 0.05f);\n"
"}\n"
"\n"
"float4 tfx(float4 T, float4 C)\n"
"{\n"
"	float4 C_out;\n"
"	float4 FxT = trunc((C * T) / 128.0f);\n"
"\n"
"#if (PS_TFX == 0)\n"
"	C_out = FxT;\n"
"#elif (PS_TFX == 1)\n"
"	C_out = T;\n"
"#elif (PS_TFX == 2)\n"
"	C_out.rgb = FxT.rgb + C.a;\n"
"	C_out.a = T.a + C.a;\n"
"#elif (PS_TFX == 3)\n"
"	C_out.rgb = FxT.rgb + C.a;\n"
"	C_out.a = T.a;\n"
"#else\n"
"	C_out = C;\n"
"#endif\n"
"\n"
"#if (PS_TCC == 0)\n"
"	C_out.a = C.a;\n"
"#endif\n"
"\n"
"#if (PS_TFX == 0) || (PS_TFX == 2) || (PS_TFX == 3)\n"
"	// Clamp only when it is useful\n"
"	C_out = min(C_out, 255.0f);\n"
"#endif\n"
"\n"
"	return C_out;\n"
"}\n"
"\n"
"bool atst(float4 C)\n"
"{\n"
"	float a = C.a;\n"
"\n"
"	if(PS_ATST == 1)\n"
"	{\n"
"		return (a <= AREF);\n"
"	}\n"
"	else if(PS_ATST == 2)\n"
"	{\n"
"		return (a >= AREF);\n"
"	}\n"
"	else if(PS_ATST == 3)\n"
"	{\n"
"		 return (abs(a - AREF) <= 0.5f);\n"
"	}\n"
"	else if(PS_ATST == 4)\n"
"	{\n"
"		return (abs(a - AREF) >= 0.5f);\n"
"	}\n"
"	else\n"
"	{\n"
"		// nothing to do\n"
"		return true;\n"
"	}\n"
"}\n"
"\n"
"float4 fog(float4 c, float f)\n"
"{\n"
"	if(PS_FOG)\n"
"	{\n"
"		c.rgb = trunc(lerp(FogColor, c.rgb, f));\n"
"	}\n"
"\n"
"	return c;\n"
"}\n"
"\n"
"float4 ps_color(PS_INPUT input)\n"
"{\n"
"#if PS_FST == 0\n"
"	float2 st = input.t.xy / input.t.w;\n"
"	float2 st_int = input.ti.zw / input.t.w;\n"
"#else\n"
"	float2 st = input.ti.xy;\n"
"	float2 st_int = input.ti.zw;\n"
"#endif\n"
"\n"
"#if PS_CHANNEL_FETCH == 1\n"
"	float4 T = fetch_red(int2(input.p.xy));\n"
"#elif PS_CHANNEL_FETCH == 2\n"
"	float4 T = fetch_green(int2(input.p.xy));\n"
"#elif PS_CHANNEL_FETCH == 3\n"
"	float4 T = fetch_blue(int2(input.p.xy));\n"
"#elif PS_CHANNEL_FETCH == 4\n"
"	float4 T = fetch_alpha(int2(input.p.xy));\n"
"#elif PS_CHANNEL_FETCH == 5\n"
"	float4 T = fetch_rgb(int2(input.p.xy));\n"
"#elif PS_CHANNEL_FETCH == 6\n"
"	float4 T = fetch_gXbY(int2(input.p.xy));\n"
"#elif PS_DEPTH_FMT > 0\n"
"	float4 T = sample_depth(st_int, input.p.xy);\n"
"#else\n"
"	float4 T = sample_color(st, input.t.w);\n"
"#endif\n"
"\n"
"	if (PS_SHUFFLE && !PS_SHUFFLE_SAME && !PS_READ16_SRC)\n"
"	{\n"
"		uint4 denorm_c_before = uint4(T);\n"
"		if (PS_PROCESS_BA & SHUFFLE_READ)\n"
"		{\n"
"			T.r = float((denorm_c_before.b << 3) & 0xF8);\n"
"			T.g = float(((denorm_c_before.b >> 2) & 0x38) | ((denorm_c_before.a << 6) & 0xC0));\n"
"			T.b = float((denorm_c_before.a << 1) & 0xF8);\n"
"			T.a = float(denorm_c_before.a & 0x80);\n"
"		}\n"
"		else\n"
"		{\n"
"			T.r = float((denorm_c_before.r << 3) & 0xF8);\n"
"			T.g = float(((denorm_c_before.r >> 2) & 0x38) | ((denorm_c_before.g << 6) & 0xC0));\n"
"			T.b = float((denorm_c_before.g << 1) & 0xF8);\n"
"			T.a = float(denorm_c_before.g & 0x80);\n"
"		}\n"
"\n"
"		T.a = (T.a >= 127.5f ? TA.y : !PS_AEM || any(int3(T.rgb) & 0xF8) ? TA.x : 0) * 255.0f;\n"
"	}\n"
"\n"
"	float4 C = tfx(T, input.c);\n"
"\n"
"	C = fog(C, input.t.z);\n"
"\n"
"	return C;\n"
"}\n"
"\n"
"void ps_fbmask(inout float4 C, float2 pos_xy)\n"
"{\n"
"	if (PS_FBMASK)\n"
"	{\n"
"		float4 RT = trunc(RtTexture.Load(int3(pos_xy, 0)) * 255.0f + 0.1f);\n"
"		C = (float4)(((uint4)C & ~FbMask) | ((uint4)RT & FbMask));\n"
"	}\n"
"}\n"
"\n"
"void ps_dither(inout float3 C, float As, float2 pos_xy)\n"
"{\n"
"	if (PS_DITHER > 0 && PS_DITHER < 3)\n"
"	{\n"
"		int2 fpos;\n"
"\n"
"		if (PS_DITHER == 2)\n"
"			fpos = int2(pos_xy);\n"
"		else\n"
"			fpos = int2(pos_xy * RcpScaleFactor);\n"
"\n"
"		float value = DitherMatrix[fpos.x & 3][fpos.y & 3];\n"
"		\n"
"		// The idea here is we add on the dither amount adjusted by the alpha before it goes to the hw blend\n"
"		// so after the alpha blend the resulting value should be the same as (Cs - Cd) * As + Cd + Dither.\n"
"		if (PS_DITHER_ADJUST)\n"
"		{\n"
"			float Alpha = PS_BLEND_C == 2 ? Af : As;\n"
"			value *= Alpha > 0.0f ? min(1.0f / Alpha, 1.0f) : 1.0f;\n"
"		}\n"
"		\n"
"		if (PS_ROUND_INV)\n"
"			C -= value;\n"
"		else\n"
"			C += value;\n"
"	}\n"
"}\n"
"\n"
"void ps_color_clamp_wrap(inout float3 C)\n"
"{\n"
"	// When dithering the bottom 3 bits become meaningless and cause lines in the picture\n"
"	// so we need to limit the color depth on dithered items\n"
"	if (SW_BLEND || (PS_DITHER > 0 && PS_DITHER < 3) || PS_FBMASK)\n"
"	{\n"
"		if (PS_DST_FMT == FMT_16 && PS_BLEND_MIX == 0 && PS_ROUND_INV)\n"
"			C += 7.0f; // Need to round up, not down since the shader will invert\n"
"\n"
"		// Standard Clamp\n"
"		if (PS_COLCLIP == 0 && PS_HDR == 0)\n"
"			C = clamp(C, (float3)0.0f, (float3)255.0f);\n"
"\n"
"		// In 16 bits format, only 5 bits of color are used. It impacts shadows computation of Castlevania\n"
"		if (PS_DST_FMT == FMT_16 && PS_DITHER != 3 && (PS_BLEND_MIX == 0 || PS_DITHER))\n"
"			C = (float3)((int3)C & (int3)0xF8);\n"
"		else if (PS_COLCLIP == 1 || PS_HDR == 1)\n"
"			C = (float3)((int3)C & (int3)0xFF);\n"
"	}\n"
"}\n"
"\n"
"void ps_blend(inout float4 Color, inout float4 As_rgba, float2 pos_xy)\n"
"{\n"
"	float As = As_rgba.a;\n"
"\n"
"	if (SW_BLEND)\n"
"	{\n"
"		// PABE\n"
"		if (PS_PABE)\n"
"		{\n"
"			// No blending so early exit\n"
"			if (As < 1.0f)\n"
"				return;\n"
"		}\n"
"\n"
"		float4 RT = SW_BLEND_NEEDS_RT ? RtTexture.Load(int3(pos_xy, 0)) : (float4)0.0f;\n"
"\n"
"		if (PS_SHUFFLE && SW_BLEND_NEEDS_RT)\n"
"		{\n"
"			uint4 denorm_rt = uint4(RT);\n"
"			if (PS_PROCESS_BA & SHUFFLE_WRITE)\n"
"			{\n"
"				RT.r = float((denorm_rt.b << 3) & 0xF8);\n"
"				RT.g = float(((denorm_rt.b >> 2) & 0x38) | ((denorm_rt.a << 6) & 0xC0));\n"
"				RT.b = float((denorm_rt.a << 1) & 0xF8);\n"
"				RT.a = float(denorm_rt.a & 0x80);\n"
"			}\n"
"			else\n"
"			{\n"
"				RT.r = float((denorm_rt.r << 3) & 0xF8);\n"
"				RT.g = float(((denorm_rt.r >> 2) & 0x38) | ((denorm_rt.g << 6) & 0xC0));\n"
"				RT.b = float((denorm_rt.g << 1) & 0xF8);\n"
"				RT.a = float(denorm_rt.g & 0x80);\n"
"			}\n"
"		}\n"
"		\n"
"		float Ad = PS_RTA_CORRECTION ? trunc(RT.a * 128.0f + 0.1f) / 128.0f : trunc(RT.a * 255.0f + 0.1f) / 128.0f;\n"
"		float3 Cd = trunc(RT.rgb * 255.0f + 0.1f);\n"
"		float3 Cs = Color.rgb;\n"
"\n"
"		float3 A = (PS_BLEND_A == 0) ? Cs : ((PS_BLEND_A == 1) ? Cd : (float3)0.0f);\n"
"		float3 B = (PS_BLEND_B == 0) ? Cs : ((PS_BLEND_B == 1) ? Cd : (float3)0.0f);\n"
"		float  C = (PS_BLEND_C == 0) ? As : ((PS_BLEND_C == 1) ? Ad : Af);\n"
"		float3 D = (PS_BLEND_D == 0) ? Cs : ((PS_BLEND_D == 1) ? Cd : (float3)0.0f);\n"
"\n"
"		// As/Af clamp alpha for Blend mix\n"
"		// We shouldn't clamp blend mix with blend hw 1 as we want alpha higher\n"
"		float C_clamped = C;\n"
"		if (PS_BLEND_MIX > 0 && PS_BLEND_HW != 1 && PS_BLEND_HW != 2)\n"
"			C_clamped = saturate(C_clamped);\n"
"\n"
"		if (PS_BLEND_A == PS_BLEND_B)\n"
"			Color.rgb = D;\n"
"		// In blend_mix, HW adds on some alpha factor * dst.\n"
"		// Truncating here wouldn't quite get the right result because it prevents the <1 bit here from combining with a <1 bit in dst to form a ≥1 amount that pushes over the truncation.\n"
"		// Instead, apply an offset to convert HW's round to a floor.\n"
"		// Since alpha is in 1/128 increments, subtracting (0.5 - 0.5/128 == 127/256) would get us what we want if GPUs blended in full precision.\n"
"		// But they don't.  Details here: https://github.com/PCSX2/pcsx2/pull/6809#issuecomment-1211473399\n"
"		// Based on the scripts at the above link, the ideal choice for Intel GPUs is 126/256, AMD 120/256.  Nvidia is a lost cause.\n"
"		// 124/256 seems like a reasonable compromise, providing the correct answer 99.3% of the time on Intel (vs 99.6% for 126/256), and 97% of the time on AMD (vs 97.4% for 120/256).\n"
"		else if (PS_BLEND_MIX == 2)\n"
"			Color.rgb = ((A - B) * C_clamped + D) + (124.0f / 256.0f);\n"
"		else if (PS_BLEND_MIX == 1)\n"
"			Color.rgb = ((A - B) * C_clamped + D) - (124.0f / 256.0f);\n"
"		else\n"
"			Color.rgb = trunc(((A - B) * C) + D);\n"
"\n"
"		if (PS_BLEND_HW == 1)\n"
"		{\n"
"			// As or Af\n"
"			As_rgba.rgb = (float3)C;\n"
"			// Subtract 1 for alpha to compensate for the changed equation,\n"
"			// if c.rgb > 255.0f then we further need to adjust alpha accordingly,\n"
"			// we pick the lowest overflow from all colors because it's the safest,\n"
"			// we divide by 255 the color because we don't know Cd value,\n"
"			// changed alpha should only be done for hw blend.\n"
"			float3 alpha_compensate = max((float3)1.0f, Color.rgb / (float3)255.0f);\n"
"			As_rgba.rgb -= alpha_compensate;\n"
"		}\n"
"		else if (PS_BLEND_HW == 2)\n"
"		{\n"
"			// Since we can't do Cd*(Alpha + 1) - Cs*Alpha in hw blend\n"
"			// what we can do is adjust the Cs value that will be\n"
"			// subtracted, this way we can get a better result in hw blend.\n"
"			// Result is still wrong but less wrong than before.\n"
"			float division_alpha = 1.0f + C;\n"
"			Color.rgb /= (float3)division_alpha;\n"
"		}\n"
"		else if (PS_BLEND_HW == 3)\n"
"		{\n"
"			// As, Ad or Af clamped.\n"
"			As_rgba.rgb = (float3)C_clamped;\n"
"			// Cs*(Alpha + 1) might overflow, if it does then adjust alpha value\n"
"			// that is sent on second output to compensate.\n"
"			float3 overflow_check = (Color.rgb - (float3)255.0f) / 255.0f;\n"
"			float3 alpha_compensate = max((float3)0.0f, overflow_check);\n"
"			As_rgba.rgb -= alpha_compensate;\n"
"		}\n"
"	}\n"
"	else\n"
"	{\n"
"		if (PS_BLEND_HW == 1)\n"
"		{\n"
"			// Needed for Cd * (As/Ad/F + 1) blending modes\n"
"\n"
"			Color.rgb = (float3)255.0f;\n"
"		}\n"
"		else if (PS_BLEND_HW == 2)\n"
"		{\n"
"			// Cd*As,Cd*Ad or Cd*F\n"
"			float Alpha = PS_BLEND_C == 2 ? Af : As;\n"
"\n"
"			Color.rgb = saturate((float3)Alpha - (float3)1.0f) * (float3)255.0f;\n"
"		}\n"
"		else if (PS_BLEND_HW == 3 && PS_RTA_CORRECTION == 0)\n"
"		{\n"
"			// Needed for Cs*Ad, Cs*Ad + Cd, Cd - Cs*Ad\n"
"			// Multiply Color.rgb by (255/128) to compensate for wrong Ad/255 value when rgb are below 128.\n"
"			// When any color channel is higher than 128 then adjust the compensation automatically\n"
"			// to give us more accurate colors, otherwise they will be wrong.\n"
"			// The higher the value (>128) the lower the compensation will be.\n"
"			float max_color = max(max(Color.r, Color.g), Color.b);\n"
"			float color_compensate = 255.0f / max(128.0f, max_color);\n"
"			Color.rgb *= (float3)color_compensate;\n"
"		}\n"
"		else if (PS_BLEND_HW == 4)\n"
"		{\n"
"			// Needed for Cd * (1 - Ad)\n"
"			Color.rgb = (float3)128.0f;\n"
"		}\n"
"	}\n"
"}\n"
"\n"
"PS_OUTPUT ps_main(PS_INPUT input)\n"
"{\n"
"	float4 C = ps_color(input);\n"
"	bool atst_pass = atst(C);\n"
"\n"
"#if PS_AFAIL == 0 // KEEP or ATST off\n"
"	if (!atst_pass)\n"
"		discard;\n"
"#endif\n"
"\n"
"	PS_OUTPUT output;\n"
"\n"
"	if (PS_SCANMSK & 2)\n"
"	{\n"
"		// fail depth test on prohibited lines\n"
"		if ((int(input.p.y) & 1) == (PS_SCANMSK & 1))\n"
"			discard;\n"
"	}\n"
"\n"
"	// Must be done before alpha correction\n"
"\n"
"	// AA (Fixed one) will output a coverage of 1.0 as alpha\n"
"	if (PS_FIXED_ONE_A)\n"
"	{\n"
"		C.a = 128.0f;\n"
"	}\n"
"\n"
"	float4 alpha_blend = (float4)0.0f;\n"
"	if (SW_AD_TO_HW)\n"
"	{\n"
"		float4 RT = PS_RTA_CORRECTION ? trunc(RtTexture.Load(int3(input.p.xy, 0)) * 128.0f + 0.1f) : trunc(RtTexture.Load(int3(input.p.xy, 0)) * 255.0f + 0.1f);\n"
"		alpha_blend = (float4)(RT.a / 128.0f);\n"
"	}\n"
"	else\n"
"	{\n"
"		alpha_blend = (float4)(C.a / 128.0f);\n"
"	}\n"
"\n"
"	// Alpha correction\n"
"	if (PS_DST_FMT == FMT_16)\n"
"	{\n"
"		float A_one = 128.0f; // alpha output will be 0x80\n"
"		C.a = PS_FBA ? A_one : step(A_one, C.a) * A_one;\n"
"	}\n"
"	else if ((PS_DST_FMT == FMT_32) && PS_FBA)\n"
"	{\n"
"		float A_one = 128.0f;\n"
"		if (C.a < A_one) C.a += A_one;\n"
"	}\n"
"\n"
"#if PS_DATE == 3\n"
"	// Note gl_PrimitiveID == stencil_ceil will be the primitive that will update\n"
"	// the bad alpha value so we must keep it.\n"
"	int stencil_ceil = int(PrimMinTexture.Load(int3(input.p.xy, 0)));\n"
"	if (int(input.primid) > stencil_ceil)\n"
"		discard;\n"
"#endif\n"
"\n"
"	// Get first primitive that will write a failling alpha value\n"
"#if PS_DATE == 1\n"
"	// DATM == 0\n"
"	// Pixel with alpha equal to 1 will failed (128-255)\n"
"	output.c = (C.a > 127.5f) ? float(input.primid) : float(0x7FFFFFFF);\n"
"\n"
"#elif PS_DATE == 2\n"
"\n"
"	// DATM == 1\n"
"	// Pixel with alpha equal to 0 will failed (0-127)\n"
"	output.c = (C.a < 127.5f) ? float(input.primid) : float(0x7FFFFFFF);\n"
"\n"
"#else\n"
"	// Not primid DATE setup\n"
"\n"
"	ps_blend(C, alpha_blend, input.p.xy);\n"
"\n"
"	if (PS_SHUFFLE)\n"
"	{\n"
"		if (!PS_SHUFFLE_SAME && !PS_READ16_SRC)\n"
"		{\n"
"			uint4 denorm_c_after = uint4(C);\n"
"			if (PS_PROCESS_BA & SHUFFLE_READ)\n"
"			{\n"
"				C.b = float(((denorm_c_after.r >> 3) & 0x1F) | ((denorm_c_after.g << 2) & 0xE0));\n"
"				C.a = float(((denorm_c_after.g >> 6) & 0x3) | ((denorm_c_after.b >> 1) & 0x7C) | (denorm_c_after.a & 0x80));\n"
"			}\n"
"			else\n"
"			{\n"
"				C.r = float(((denorm_c_after.r >> 3) & 0x1F) | ((denorm_c_after.g << 2) & 0xE0));\n"
"				C.g = float(((denorm_c_after.g >> 6) & 0x3) | ((denorm_c_after.b >> 1) & 0x7C) | (denorm_c_after.a & 0x80));\n"
"			}\n"
"		}\n"
"\n"
"		// Special case for 32bit input and 16bit output, shuffle used by The Godfather\n"
"		if (PS_SHUFFLE_SAME)\n"
"		{\n"
"			uint4 denorm_c = uint4(C);\n"
"\n"
"			if (PS_PROCESS_BA & SHUFFLE_READ)\n"
"				C = (float4)(float((denorm_c.b & 0x7Fu) | (denorm_c.a & 0x80u)));\n"
"			else\n"
"				C.ga = C.rg;\n"
"		}\n"
"		// Copy of a 16bit source in to this target\n"
"		else if (PS_READ16_SRC)\n"
"		{\n"
"			uint4 denorm_c = uint4(C);\n"
"			uint2 denorm_TA = uint2(float2(TA.xy) * 255.0f + 0.5f);\n"
"			C.rb = (float2)float((denorm_c.r >> 3) | (((denorm_c.g >> 3) & 0x7u) << 5));\n"
"			if (denorm_c.a & 0x80u)\n"
"				C.ga = (float2)float((denorm_c.g >> 6) | ((denorm_c.b >> 3) << 2) | (denorm_TA.y & 0x80u));\n"
"			else\n"
"				C.ga = (float2)float((denorm_c.g >> 6) | ((denorm_c.b >> 3) << 2) | (denorm_TA.x & 0x80u));\n"
"		}\n"
"		else if (PS_SHUFFLE_ACROSS)\n"
"		{\n"
"			if (PS_PROCESS_BA == SHUFFLE_READWRITE && PS_PROCESS_RG == SHUFFLE_READWRITE)\n"
"			{\n"
"				C.rb = C.br;\n"
"				float g_temp = C.g;\n"
"\n"
"				C.g = C.a;\n"
"				C.a = g_temp;\n"
"			}\n"
"			else if(PS_PROCESS_BA & SHUFFLE_READ)\n"
"			{\n"
"				C.rb = C.bb;\n"
"				C.ga = C.aa;\n"
"			}\n"
"			else\n"
"			{\n"
"				C.rb = C.rr;\n"
"				C.ga = C.gg;\n"
"			}\n"
"		}\n"
"	}\n"
"\n"
"	ps_dither(C.rgb, alpha_blend.a, input.p.xy);\n"
"\n"
"	// Color clamp/wrap needs to be done after sw blending and dithering\n"
"	ps_color_clamp_wrap(C.rgb);\n"
"\n"
"	ps_fbmask(C, input.p.xy);\n"
"\n"
"#if PS_AFAIL == 3 // RGB_ONLY\n"
"	// Use alpha blend factor to determine whether to update A.\n"
"	alpha_blend.a = float(atst_pass);\n"
"#endif\n"
"\n"
"#if !PS_NO_COLOR\n"
"	output.c0.a = PS_RTA_CORRECTION ? C.a / 128.0f : C.a / 255.0f;\n"
"	output.c0.rgb = PS_HDR ? float3(C.rgb / 65535.0f) : C.rgb / 255.0f;\n"
"#if !PS_NO_COLOR1\n"
"	output.c1 = alpha_blend;\n"
"#endif\n"
"#endif // !PS_NO_COLOR\n"
"\n"
"#endif // PS_DATE != 1/2\n"
"\n"
"#if PS_ZCLAMP\n"
"	output.depth = min(input.p.z, MaxDepthPS);\n"
"#endif\n"
"\n"
"	return output;\n"
"}\n"
"\n"
"#endif // PIXEL_SHADER\n"
"\n"
"//////////////////////////////////////////////////////////////////////\n"
"// Vertex Shader\n"
"//////////////////////////////////////////////////////////////////////\n"
"\n"
"#ifdef VERTEX_SHADER\n"
"\n"
"#ifdef DX12\n"
"cbuffer cb0 : register(b0)\n"
"#else\n"
"cbuffer cb0\n"
"#endif\n"
"{\n"
"	float2 VertexScale;\n"
"	float2 VertexOffset;\n"
"	float2 TextureScale;\n"
"	float2 TextureOffset;\n"
"	float2 PointSize;\n"
"	uint MaxDepth;\n"
"	uint BaseVertex; // Only used in DX11.\n"
"};\n"
"\n"
"VS_OUTPUT vs_main(VS_INPUT input)\n"
"{\n"
"	// Clamp to max depth, gs doesn't wrap\n"
"	input.z = min(input.z, MaxDepth);\n"
"\n"
"	VS_OUTPUT output;\n"
"\n"
"	// pos -= 0.05 (1/320 pixel) helps avoiding rounding problems (integral part of pos is usually 5 digits, 0.05 is about as low as we can go)\n"
"	// example: ceil(afterseveralvertextransformations(y = 133)) => 134 => line 133 stays empty\n"
"	// input granularity is 1/16 pixel, anything smaller than that won't step drawing up/left by one pixel\n"
"	// example: 133.0625 (133 + 1/16) should start from line 134, ceil(133.0625 - 0.05) still above 133\n"
"\n"
"	output.p = float4(input.p, input.z, 1.0f) - float4(0.05f, 0.05f, 0, 0);\n"
"\n"
"	output.p.xy = output.p.xy * float2(VertexScale.x, -VertexScale.y) - float2(VertexOffset.x, -VertexOffset.y);\n"
"	output.p.z *= exp2(-32.0f);		// integer->float depth\n"
"\n"
"	if(VS_TME)\n"
"	{\n"
"		float2 uv = input.uv - TextureOffset;\n"
"		float2 st = input.st - TextureOffset;\n"
"\n"
"		// Integer nomalized\n"
"		output.ti.xy = uv * TextureScale;\n"
"\n"
"		if (VS_FST)\n"
"		{\n"
"			// Integer integral\n"
"			output.ti.zw = uv;\n"
"		}\n"
"		else\n"
"		{\n"
"			// float for post-processing in some games\n"
"			output.ti.zw = st / TextureScale;\n"
"		}\n"
"		// Float coords\n"
"		output.t.xy = st;\n"
"		output.t.w = input.q;\n"
"	}\n"
"	else\n"
"	{\n"
"		output.t.xy = 0;\n"
"		output.t.w = 1.0f;\n"
"		output.ti = 0;\n"
"	}\n"
"\n"
"	output.c = input.c;\n"
"	output.t.z = input.f.r;\n"
"\n"
"	return output;\n"
"}\n"
"\n"
"#if VS_EXPAND != 0\n"
"\n"
"struct VS_RAW_INPUT\n"
"{\n"
"	float2 ST;\n"
"	uint RGBA;\n"
"	float Q;\n"
"	uint XY;\n"
"	uint Z;\n"
"	uint UV;\n"
"	uint FOG;\n"
"};\n"
"\n"
"StructuredBuffer<VS_RAW_INPUT> vertices : register(t0);\n"
"\n"
"VS_INPUT load_vertex(uint index)\n"
"{\n"
"#ifdef DX12\n"
"	VS_RAW_INPUT raw = vertices.Load(index);\n"
"#else\n"
"	VS_RAW_INPUT raw = vertices.Load(BaseVertex + index);\n"
"#endif\n"
"\n"
"	VS_INPUT vert;\n"
"	vert.st = raw.ST;\n"
"	vert.c = uint4(raw.RGBA & 0xFFu, (raw.RGBA >> 8) & 0xFFu, (raw.RGBA >> 16) & 0xFFu, raw.RGBA >> 24);\n"
"	vert.q = raw.Q;\n"
"	vert.p = uint2(raw.XY & 0xFFFFu, raw.XY >> 16);\n"
"	vert.z = raw.Z;\n"
"	vert.uv = uint2(raw.UV & 0xFFFFu, raw.UV >> 16);\n"
"	vert.f = float4(float(raw.FOG & 0xFFu), float((raw.FOG >> 8) & 0xFFu), float((raw.FOG >> 16) & 0xFFu), float(raw.FOG >> 24)) / 255.0f;\n"
"	return vert;\n"
"}\n"
"\n"
"VS_OUTPUT vs_main_expand(uint vid : SV_VertexID)\n"
"{\n"
"#if VS_EXPAND == 1 // Point\n"
"\n"
"	VS_OUTPUT vtx = vs_main(load_vertex(vid >> 2));\n"
"\n"
"	vtx.p.x += ((vid & 1u) != 0u) ? PointSize.x : 0.0f;\n"
"	vtx.p.y += ((vid & 2u) != 0u) ? PointSize.y : 0.0f;\n"
"\n"
"	return vtx;\n"
"\n"
"#elif VS_EXPAND == 2 // Line\n"
"\n"
"	uint vid_base = vid >> 2;\n"
"	bool is_bottom = vid & 2;\n"
"	bool is_right = vid & 1;\n"
"	// All lines will be a pair of vertices next to each other\n"
"	// Since DirectX uses provoking vertex first, the bottom point will be the lower of the two\n"
"	uint vid_other = is_bottom ? vid_base + 1 : vid_base - 1;\n"
"	VS_OUTPUT vtx = vs_main(load_vertex(vid_base));\n"
"	VS_OUTPUT other = vs_main(load_vertex(vid_other));\n"
"\n"
"	float2 line_vector = normalize(vtx.p.xy - other.p.xy);\n"
"	float2 line_normal = float2(line_vector.y, -line_vector.x);\n"
"	float2 line_width = (line_normal * PointSize) / 2;\n"
"	// line_normal is inverted for bottom point\n"
"	float2 offset = (is_bottom ^ is_right) ? line_width : -line_width;\n"
"	vtx.p.xy += offset;\n"
"\n"
"	// Lines will be run as (0 1 2) (1 2 3)\n"
"	// This means that both triangles will have a point based off the top line point as their first point\n"
"	// So we don't have to do anything for !IIP\n"
"\n"
"	return vtx;\n"
"\n"
"#elif VS_EXPAND == 3 // Sprite\n"
"\n"
"	// Sprite points are always in pairs\n"
"	uint vid_base = vid >> 1;\n"
"	uint vid_lt = vid_base & ~1u;\n"
"	uint vid_rb = vid_base | 1u;\n"
"\n"
"	VS_OUTPUT lt = vs_main(load_vertex(vid_lt));\n"
"	VS_OUTPUT rb = vs_main(load_vertex(vid_rb));\n"
"	VS_OUTPUT vtx = rb;\n"
"\n"
"	bool is_right = ((vid & 1u) != 0u);\n"
"	vtx.p.x = is_right ? lt.p.x : vtx.p.x;\n"
"	vtx.t.x = is_right ? lt.t.x : vtx.t.x;\n"
"	vtx.ti.xz = is_right ? lt.ti.xz : vtx.ti.xz;\n"
"\n"
"	bool is_bottom = ((vid & 2u) != 0u);\n"
"	vtx.p.y = is_bottom ? lt.p.y : vtx.p.y;\n"
"	vtx.t.y = is_bottom ? lt.t.y : vtx.t.y;\n"
"	vtx.ti.yw = is_bottom ? lt.ti.yw : vtx.ti.yw;\n"
"\n"
"	return vtx;\n"
"\n"
"#endif\n"
"}\n"
"\n"
"#endif // VS_EXPAND\n"
"\n"
"#endif // VERTEX_SHADER\n"
;
