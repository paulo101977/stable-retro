static const char tfx_fs_glsl_shader_raw[] = 
"#define FMT_32 0\n"
"#define FMT_24 1\n"
"#define FMT_16 2\n"
"\n"
"#define SHUFFLE_READ  1\n"
"#define SHUFFLE_WRITE 2\n"
"#define SHUFFLE_READWRITE 3\n"
"\n"
"// TEX_COORD_DEBUG output the uv coordinate as color. It is useful\n"
"// to detect bad sampling due to upscaling\n"
"//#define TEX_COORD_DEBUG\n"
"// Just copy directly the texture coordinate\n"
"#ifdef TEX_COORD_DEBUG\n"
"#define PS_TFX 1\n"
"#define PS_TCC 1\n"
"#endif\n"
"\n"
"#define SW_BLEND (PS_BLEND_A || PS_BLEND_B || PS_BLEND_D)\n"
"#define SW_BLEND_NEEDS_RT (SW_BLEND && (PS_BLEND_A == 1 || PS_BLEND_B == 1 || PS_BLEND_C == 1 || PS_BLEND_D == 1))\n"
"#define SW_AD_TO_HW (PS_BLEND_C == 1 && PS_A_MASKED)\n"
"#define PS_PRIMID_INIT (PS_DATE == 1 || PS_DATE == 2)\n"
"#define NEEDS_RT_EARLY (PS_TEX_IS_FB == 1 || PS_DATE >= 5)\n"
"#define NEEDS_RT (NEEDS_RT_EARLY || (!PS_PRIMID_INIT && (PS_FBMASK || SW_BLEND_NEEDS_RT || SW_AD_TO_HW)))\n"
"#define NEEDS_TEX (PS_TFX != 4)\n"
"\n"
"layout(std140, binding = 0) uniform cb21\n"
"{\n"
"	vec3 FogColor;\n"
"	float AREF;\n"
"\n"
"	vec4 WH;\n"
"\n"
"	vec2 TA;\n"
"	float MaxDepthPS;\n"
"	float Af;\n"
"\n"
"	uvec4 FbMask;\n"
"\n"
"	vec4 HalfTexel;\n"
"\n"
"	vec4 MinMax;\n"
"	vec4 LODParams;\n"
"	vec4 STRange;\n"
"\n"
"	ivec4 ChannelShuffle;\n"
"\n"
"	vec2 TC_OffsetHack;\n"
"	vec2 STScale;\n"
"\n"
"	mat4 DitherMatrix;\n"
"\n"
"	float ScaledScaleFactor;\n"
"	float RcpScaleFactor;\n"
"};\n"
"\n"
"in SHADER\n"
"{\n"
"	vec4 t_float;\n"
"	vec4 t_int;\n"
"\n"
"	#if PS_IIP != 0\n"
"		vec4 c;\n"
"	#else\n"
"		flat vec4 c;\n"
"	#endif\n"
"} PSin;\n"
"\n"
"#define TARGET_0_QUALIFIER out\n"
"\n"
"// Only enable framebuffer fetch when we actually need it.\n"
"#if HAS_FRAMEBUFFER_FETCH && NEEDS_RT\n"
"	// We need to force the colour to be defined here, to read from it.\n"
"	// Basically the only scenario where this'll happen is RGBA masked and DATE is active.\n"
"	#undef PS_NO_COLOR\n"
"	#define PS_NO_COLOR 0\n"
"	#if defined(GL_EXT_shader_framebuffer_fetch)\n"
"		#undef TARGET_0_QUALIFIER\n"
"		#define TARGET_0_QUALIFIER inout\n"
"		#define LAST_FRAG_COLOR SV_Target0\n"
"	#elif defined(GL_ARM_shader_framebuffer_fetch)\n"
"		#define LAST_FRAG_COLOR gl_LastFragColorARM\n"
"	#endif\n"
"#endif\n"
"\n"
"#if !PS_NO_COLOR && !PS_NO_COLOR1\n"
"	// Same buffer but 2 colors for dual source blending\n"
"	layout(location = 0, index = 0) TARGET_0_QUALIFIER vec4 SV_Target0;\n"
"	layout(location = 0, index = 1) out vec4 SV_Target1;\n"
"#elif !PS_NO_COLOR\n"
"	layout(location = 0) TARGET_0_QUALIFIER vec4 SV_Target0;\n"
"#endif\n"
"\n"
"#if NEEDS_TEX\n"
"layout(binding = 0) uniform sampler2D TextureSampler;\n"
"layout(binding = 1) uniform sampler2D PaletteSampler;\n"
"#endif\n"
"\n"
"#if !HAS_FRAMEBUFFER_FETCH && NEEDS_RT\n"
"layout(binding = 2) uniform sampler2D RtSampler; // note 2 already use by the image below\n"
"#endif\n"
"\n"
"#if PS_DATE == 3\n"
"layout(binding = 3) uniform sampler2D img_prim_min;\n"
"\n"
"// I don't remember why I set this parameter but it is surely useless\n"
"//layout(pixel_center_integer) in vec4 gl_FragCoord;\n"
"#endif\n"
"\n"
"vec4 fetch_rt()\n"
"{\n"
"#if !NEEDS_RT\n"
"	return vec4(0.0);\n"
"#elif HAS_FRAMEBUFFER_FETCH\n"
"	return LAST_FRAG_COLOR;\n"
"#else\n"
"	return texelFetch(RtSampler, ivec2(gl_FragCoord.xy), 0);\n"
"#endif\n"
"}\n"
"\n"
"#if NEEDS_TEX\n"
"\n"
"vec4 sample_c(vec2 uv)\n"
"{\n"
"#if PS_TEX_IS_FB == 1\n"
"	return fetch_rt();\n"
"#elif PS_REGION_RECT\n"
"	return texelFetch(TextureSampler, ivec2(uv), 0);\n"
"#else\n"
"\n"
"#if !PS_ADJS && !PS_ADJT\n"
"	uv *= STScale;\n"
"#else\n"
"	#if PS_ADJS\n"
"		uv.x = (uv.x - STRange.x) * STRange.z;\n"
"	#else\n"
"		uv.x = uv.x * STScale.x;\n"
"	#endif\n"
"	#if PS_ADJT\n"
"		uv.y = (uv.y - STRange.y) * STRange.w;\n"
"	#else\n"
"		uv.y = uv.y * STScale.y;\n"
"	#endif\n"
"#endif\n"
"\n"
"#if PS_AUTOMATIC_LOD == 1\n"
"	return texture(TextureSampler, uv);\n"
"#elif PS_MANUAL_LOD == 1\n"
"	// FIXME add LOD: K - ( LOG2(Q) * (1 << L))\n"
"	float K = LODParams.x;\n"
"	float L = LODParams.y;\n"
"	float bias = LODParams.z;\n"
"	float max_lod = LODParams.w;\n"
"	\n"
"\n"
"	float gs_lod = K - log2(abs(PSin.t_float.w)) * L;\n"
"	// FIXME max useful ?\n"
"	//float lod = max(min(gs_lod, max_lod) - bias, 0.0f);\n"
"	float lod = min(gs_lod, max_lod) - bias;\n"
"\n"
"	return textureLod(TextureSampler, uv, lod);\n"
"#else\n"
"	return textureLod(TextureSampler, uv, 0.0f); // No lod\n"
"#endif\n"
"\n"
"#endif\n"
"}\n"
"\n"
"vec4 sample_p(uint idx)\n"
"{\n"
"	return texelFetch(PaletteSampler, ivec2(int(idx), 0), 0);\n"
"}\n"
"\n"
"vec4 sample_p_norm(float u)\n"
"{\n"
"	return sample_p(uint(u * 255.5f));\n"
"}\n"
"\n"
"vec4 clamp_wrap_uv(vec4 uv)\n"
"{\n"
"	vec4 uv_out = uv;\n"
"	vec4 tex_size = WH.xyxy;\n"
"\n"
"#if PS_WMS == PS_WMT\n"
"\n"
"#if PS_REGION_RECT == 1 && PS_WMS == 0\n"
"	uv_out = fract(uv);\n"
"#elif PS_REGION_RECT == 1 && PS_WMS == 1\n"
"	uv_out = clamp(uv, vec4(0.0f), vec4(1.0f));\n"
"#elif PS_WMS == 2\n"
"	uv_out = clamp(uv, MinMax.xyxy, MinMax.zwzw);\n"
"#elif PS_WMS == 3\n"
"	#if PS_FST == 0\n"
"	// wrap negative uv coords to avoid an off by one error that shifted\n"
"	// textures. Fixes Xenosaga's hair issue.\n"
"	uv = fract(uv);\n"
"	#endif\n"
"	uv_out = vec4((uvec4(uv * tex_size) & floatBitsToUint(MinMax.xyxy)) | floatBitsToUint(MinMax.zwzw)) / tex_size;\n"
"#endif\n"
"\n"
"#else // PS_WMS != PS_WMT\n"
"\n"
"#if PS_REGION_RECT == 1 && PS_WMS == 0\n"
"	uv.xz = fract(uv.xz);\n"
"\n"
"#elif PS_REGION_RECT == 1 && PS_WMS == 1\n"
"	uv.xz = clamp(uv.xz, vec2(0.0f), vec2(1.0f));\n"
"\n"
"#elif PS_WMS == 2\n"
"	uv_out.xz = clamp(uv.xz, MinMax.xx, MinMax.zz);\n"
"\n"
"#elif PS_WMS == 3\n"
"	#if PS_FST == 0\n"
"		uv.xz = fract(uv.xz);\n"
"	#endif\n"
"	uv_out.xz = vec2((uvec2(uv.xz * tex_size.xx) & floatBitsToUint(MinMax.xx)) | floatBitsToUint(MinMax.zz)) / tex_size.xx;\n"
"\n"
"#endif\n"
"\n"
"#if PS_REGION_RECT == 1 && PS_WMT == 0\n"
"	uv_out.yw = fract(uv.yw);\n"
"\n"
"#elif PS_REGION_RECT == 1 && PS_WMT == 1\n"
"	uv_out.yw = clamp(uv.yw, vec2(0.0f), vec2(1.0f));\n"
"\n"
"#elif PS_WMT == 2\n"
"	uv_out.yw = clamp(uv.yw, MinMax.yy, MinMax.ww);\n"
"\n"
"#elif PS_WMT == 3\n"
"	#if PS_FST == 0\n"
"		uv.yw = fract(uv.yw);\n"
"	#endif\n"
"	uv_out.yw = vec2((uvec2(uv.yw * tex_size.yy) & floatBitsToUint(MinMax.yy)) | floatBitsToUint(MinMax.ww)) / tex_size.yy;\n"
"#endif\n"
"\n"
"#endif\n"
"\n"
"#if PS_REGION_RECT == 1\n"
"	// Normalized -> Integer Coordinates.\n"
"	uv_out = clamp(uv_out * WH.zwzw + STRange.xyxy, STRange.xyxy, STRange.zwzw);\n"
"#endif\n"
"\n"
"	return uv_out;\n"
"}\n"
"\n"
"mat4 sample_4c(vec4 uv)\n"
"{\n"
"	mat4 c;\n"
"\n"
"	// Note: texture gather can't be used because of special clamping/wrapping\n"
"	// Also it doesn't support lod\n"
"	c[0] = sample_c(uv.xy);\n"
"	c[1] = sample_c(uv.zy);\n"
"	c[2] = sample_c(uv.xw);\n"
"	c[3] = sample_c(uv.zw);\n"
"\n"
"	return c;\n"
"}\n"
"\n"
"uvec4 sample_4_index(vec4 uv)\n"
"{\n"
"	vec4 c;\n"
"\n"
"	// Either GS will send a texture that contains a single channel\n"
"	// in this case the red channel is remapped as alpha channel\n"
"	//\n"
"	// Or we have an old RT (ie RGBA8) that contains index (4/8) in the alpha channel\n"
"\n"
"	// Note: texture gather can't be used because of special clamping/wrapping\n"
"	// Also it doesn't support lod\n"
"	c.x = sample_c(uv.xy).a;\n"
"	c.y = sample_c(uv.zy).a;\n"
"	c.z = sample_c(uv.xw).a;\n"
"	c.w = sample_c(uv.zw).a;\n"
"	\n"
"#if PS_RTA_SRC_CORRECTION \n"
"	uvec4 i = uvec4(round(c * 128.25f)); // Denormalize value\n"
"#else\n"
"	uvec4 i = uvec4(c * 255.5f); // Denormalize value\n"
"#endif\n"
"\n"
"#if PS_PAL_FMT == 1\n"
"	// 4HL\n"
"	return i & 0xFu;\n"
"#elif PS_PAL_FMT == 2\n"
"	// 4HH\n"
"	return i >> 4u;\n"
"#else\n"
"	// 8\n"
"	return i;\n"
"#endif\n"
"\n"
"}\n"
"\n"
"mat4 sample_4p(uvec4 u)\n"
"{\n"
"	mat4 c;\n"
"\n"
"	c[0] = sample_p(u.x);\n"
"	c[1] = sample_p(u.y);\n"
"	c[2] = sample_p(u.z);\n"
"	c[3] = sample_p(u.w);\n"
"\n"
"	return c;\n"
"}\n"
"\n"
"int fetch_raw_depth()\n"
"{\n"
"#if HAS_CLIP_CONTROL\n"
" 	float multiplier = exp2(32.0f);\n"
"#else\n"
"	float multiplier = exp2(24.0f);\n"
"#endif\n"
"\n"
"#if PS_TEX_IS_FB == 1\n"
"	return int(fetch_rt().r * multiplier);\n"
"#else\n"
"	return int(texelFetch(TextureSampler, ivec2(gl_FragCoord.xy), 0).r * multiplier);\n"
"#endif\n"
"}\n"
"\n"
"vec4 fetch_raw_color()\n"
"{\n"
"#if PS_TEX_IS_FB == 1\n"
"	return fetch_rt();\n"
"#else\n"
"	return texelFetch(TextureSampler, ivec2(gl_FragCoord.xy), 0);\n"
"#endif\n"
"}\n"
"\n"
"vec4 fetch_c(ivec2 uv)\n"
"{\n"
"	return texelFetch(TextureSampler, ivec2(uv), 0);\n"
"}\n"
"\n"
"//////////////////////////////////////////////////////////////////////\n"
"// Depth sampling\n"
"//////////////////////////////////////////////////////////////////////\n"
"ivec2 clamp_wrap_uv_depth(ivec2 uv)\n"
"{\n"
"	ivec2 uv_out = uv;\n"
"\n"
"	// Keep the full precision\n"
"	// It allow to multiply the ScalingFactor before the 1/16 coeff\n"
"	ivec4 mask = floatBitsToInt(MinMax) << 4;\n"
"\n"
"#if PS_WMS == PS_WMT\n"
"\n"
"#if PS_WMS == 2\n"
"	uv_out = clamp(uv, mask.xy, mask.zw);\n"
"#elif PS_WMS == 3\n"
"	uv_out = (uv & mask.xy) | mask.zw;\n"
"#endif\n"
"\n"
"#else // PS_WMS != PS_WMT\n"
"\n"
"#if PS_WMS == 2\n"
"	uv_out.x = clamp(uv.x, mask.x, mask.z);\n"
"#elif PS_WMS == 3\n"
"	uv_out.x = (uv.x & mask.x) | mask.z;\n"
"#endif\n"
"\n"
"#if PS_WMT == 2\n"
"	uv_out.y = clamp(uv.y, mask.y, mask.w);\n"
"#elif PS_WMT == 3\n"
"	uv_out.y = (uv.y & mask.y) | mask.w;\n"
"#endif\n"
"\n"
"#endif\n"
"\n"
"	return uv_out;\n"
"}\n"
"\n"
"vec4 sample_depth(vec2 st)\n"
"{\n"
"	vec2 uv_f = vec2(clamp_wrap_uv_depth(ivec2(st))) * vec2(ScaledScaleFactor);\n"
"\n"
"	#if PS_REGION_RECT == 1\n"
"		uv_f = clamp(uv_f + STRange.xy, STRange.xy, STRange.zw);\n"
"	#endif\n"
"\n"
"	ivec2 uv = ivec2(uv_f);\n"
"	vec4 t = vec4(0.0f);\n"
"\n"
"#if PS_TALES_OF_ABYSS_HLE == 1\n"
"	// Warning: UV can't be used in channel effect\n"
"	int depth = fetch_raw_depth();\n"
"\n"
"	// Convert msb based on the palette\n"
"	t = texelFetch(PaletteSampler, ivec2((depth >> 8) & 0xFF, 0), 0) * 255.0f;\n"
"\n"
"#elif PS_URBAN_CHAOS_HLE == 1\n"
"	// Depth buffer is read as a RGB5A1 texture. The game try to extract the green channel.\n"
"	// So it will do a first channel trick to extract lsb, value is right-shifted.\n"
"	// Then a new channel trick to extract msb which will shifted to the left.\n"
"	// OpenGL uses a FLOAT32 format for the depth so it requires a couple of conversion.\n"
"	// To be faster both steps (msb&lsb) are done in a single pass.\n"
"\n"
"	// Warning: UV can't be used in channel effect\n"
"	int depth = fetch_raw_depth();\n"
"\n"
"	// Convert lsb based on the palette\n"
"	t = texelFetch(PaletteSampler, ivec2((depth & 0xFF), 0), 0) * 255.0f;\n"
"\n"
"	// Msb is easier\n"
"	float green = float((depth >> 8) & 0xFF) * 36.0f;\n"
"	green = min(green, 255.0f);\n"
"\n"
"	t.g += green;\n"
"\n"
"\n"
"#elif PS_DEPTH_FMT == 1\n"
"	// Based on ps_convert_float32_rgba8 of convert\n"
"	// Convert a GL_FLOAT32 depth texture into a RGBA color texture\n"
"	#if HAS_CLIP_CONTROL\n"
"		uint d = uint(fetch_c(uv).r * exp2(32.0f));\n"
"	#else\n"
"		uint d = uint(fetch_c(uv).r * exp2(24.0f));\n"
"	#endif\n"
"	t = vec4(uvec4((d & 0xFFu), ((d >> 8) & 0xFFu), ((d >> 16) & 0xFFu), (d >> 24)));\n"
"\n"
"#elif PS_DEPTH_FMT == 2\n"
"	// Based on ps_convert_float16_rgb5a1 of convert\n"
"	// Convert a GL_FLOAT32 (only 16 lsb) depth into a RGB5A1 color texture\n"
"	#if HAS_CLIP_CONTROL\n"
"		uint d = uint(fetch_c(uv).r * exp2(32.0f));\n"
"	#else\n"
"		uint d = uint(fetch_c(uv).r * exp2(24.0f));\n"
"	#endif\n"
"	t = vec4(uvec4((d & 0x1Fu), ((d >> 5) & 0x1Fu), ((d >> 10) & 0x1Fu), (d >> 15) & 0x01u)) * vec4(8.0f, 8.0f, 8.0f, 128.0f);\n"
"\n"
"#elif PS_DEPTH_FMT == 3\n"
"	// Convert a RGBA/RGB5A1 color texture into a RGBA/RGB5A1 color texture\n"
"	t = fetch_c(uv) * 255.0f;\n"
"\n"
"#endif\n"
"\n"
"	// warning t ranges from 0 to 255\n"
"#if (PS_AEM_FMT == FMT_24)\n"
"	t.a = ( (PS_AEM == 0) || any(bvec3(t.rgb))  ) ? 255.0f * TA.x : 0.0f;\n"
"#elif (PS_AEM_FMT == FMT_16)\n"
"	t.a = t.a >= 128.0f ? 255.0f * TA.y : ( (PS_AEM == 0) || any(bvec3(t.rgb)) ) ? 255.0f * TA.x : 0.0f;\n"
"#elif PS_PAL_FMT != 0 && !PS_TALES_OF_ABYSS_HLE && !PS_URBAN_CHAOS_HLE\n"
"	t = trunc(sample_4p(uvec4(t.aaaa))[0] * 255.0f + 0.05f);\n"
"#endif\n"
"\n"
"	return t;\n"
"}\n"
"\n"
"//////////////////////////////////////////////////////////////////////\n"
"// Fetch a Single Channel\n"
"//////////////////////////////////////////////////////////////////////\n"
"vec4 fetch_red()\n"
"{\n"
"#if PS_DEPTH_FMT == 1 || PS_DEPTH_FMT == 2\n"
"	int depth = (fetch_raw_depth()) & 0xFF;\n"
"	vec4 rt = vec4(depth) / 255.0f;\n"
"#else\n"
"	vec4 rt = fetch_raw_color();\n"
"#endif\n"
"	return sample_p_norm(rt.r) * 255.0f;\n"
"}\n"
"\n"
"vec4 fetch_green()\n"
"{\n"
"#if PS_DEPTH_FMT == 1 || PS_DEPTH_FMT == 2\n"
"	int depth = (fetch_raw_depth() >> 8) & 0xFF;\n"
"	vec4 rt = vec4(depth) / 255.0f;\n"
"#else\n"
"	vec4 rt = fetch_raw_color();\n"
"#endif\n"
"	return sample_p_norm(rt.g) * 255.0f;\n"
"}\n"
"\n"
"vec4 fetch_blue()\n"
"{\n"
"#if PS_DEPTH_FMT == 1 || PS_DEPTH_FMT == 2\n"
"	int depth = (fetch_raw_depth() >> 16) & 0xFF;\n"
"	vec4 rt = vec4(depth) / 255.0f;\n"
"#else\n"
"	vec4 rt = fetch_raw_color();\n"
"#endif\n"
"	return sample_p_norm(rt.b) * 255.0f;\n"
"}\n"
"\n"
"vec4 fetch_alpha()\n"
"{\n"
"	vec4 rt = fetch_raw_color();\n"
"	return sample_p_norm(rt.a) * 255.0f;\n"
"}\n"
"\n"
"vec4 fetch_rgb()\n"
"{\n"
"	vec4 rt = fetch_raw_color();\n"
"	vec4 c = vec4(sample_p_norm(rt.r).r, sample_p_norm(rt.g).g, sample_p_norm(rt.b).b, 1.0f);\n"
"	return c * 255.0f;\n"
"}\n"
"\n"
"vec4 fetch_gXbY()\n"
"{\n"
"#if PS_DEPTH_FMT == 1 || PS_DEPTH_FMT == 2\n"
"	int depth = fetch_raw_depth();\n"
"	int bg = (depth >> (8 + ChannelShuffle.w)) & 0xFF;\n"
"	return vec4(bg);\n"
"#else\n"
"	ivec4 rt = ivec4(fetch_raw_color() * 255.0f);\n"
"	int green = (rt.g >> ChannelShuffle.w) & ChannelShuffle.z;\n"
"	int blue  = (rt.b << ChannelShuffle.y) & ChannelShuffle.x;\n"
"	return vec4(green | blue);\n"
"#endif\n"
"}\n"
"\n"
"//////////////////////////////////////////////////////////////////////\n"
"\n"
"vec4 sample_color(vec2 st)\n"
"{\n"
"#if (PS_TCOFFSETHACK == 1)\n"
"	st += TC_OffsetHack.xy;\n"
"#endif\n"
"\n"
"	vec4 t;\n"
"	mat4 c;\n"
"	vec2 dd;\n"
"\n"
"	// FIXME I'm not sure this condition is useful (I think code will be optimized)\n"
"#if (PS_LTF == 0 && PS_AEM_FMT == FMT_32 && PS_PAL_FMT == 0 && PS_REGION_RECT == 0 && PS_WMS < 2 && PS_WMT < 2)\n"
"	// No software LTF and pure 32 bits RGBA texure without special texture wrapping\n"
"	c[0] = sample_c(st);\n"
"#ifdef TEX_COORD_DEBUG\n"
"	c[0].rg = st.xy;\n"
"#endif\n"
"\n"
"#else\n"
"	vec4 uv;\n"
"\n"
"	if(PS_LTF != 0)\n"
"	{\n"
"		uv = st.xyxy + HalfTexel;\n"
"		dd = fract(uv.xy * WH.zw);\n"
"#if (PS_FST == 0)\n"
"		// Background in Shin Megami Tensei Lucifers\n"
"		// I suspect that uv isn't a standard number, so fract is outside of the [0;1] range\n"
"		// Note: it is free on GPU but let's do it only for float coordinate\n"
"		dd = clamp(dd, vec2(0.0f), vec2(1.0f));\n"
"#endif\n"
"	}\n"
"	else\n"
"	{\n"
"		uv = st.xyxy;\n"
"	}\n"
"\n"
"	uv = clamp_wrap_uv(uv);\n"
"\n"
"#if PS_PAL_FMT != 0\n"
"	c = sample_4p(sample_4_index(uv));\n"
"#else\n"
"	c = sample_4c(uv);\n"
"#endif\n"
"\n"
"#ifdef TEX_COORD_DEBUG\n"
"	c[0].rg = uv.xy;\n"
"	c[1].rg = uv.xy;\n"
"	c[2].rg = uv.xy;\n"
"	c[3].rg = uv.xy;\n"
"#endif\n"
"\n"
"#endif\n"
"\n"
"	// PERF note: using dot product reduces by 1 the number of instruction\n"
"	// but I'm not sure it is equivalent neither faster.\n"
"	for (int i = 0; i < 4; i++)\n"
"	{\n"
"		//float sum = dot(c[i].rgb, vec3(1.0f));\n"
"#if (PS_AEM_FMT == FMT_24)\n"
"		c[i].a = ( (PS_AEM == 0) || any(bvec3(c[i].rgb))  ) ? TA.x : 0.0f;\n"
"		//c[i].a = ( (PS_AEM == 0) || (sum > 0.0f) ) ? TA.x : 0.0f;\n"
"#elif (PS_AEM_FMT == FMT_16)\n"
"		c[i].a = c[i].a >= 0.5 ? TA.y : ( (PS_AEM == 0) || any(bvec3(ivec3(c[i].rgb * 255.0f) & ivec3(0xF8))) ) ? TA.x : 0.0f;\n"
"		//c[i].a = c[i].a >= 0.5 ? TA.y : ( (PS_AEM == 0) || (sum > 0.0f) ) ? TA.x : 0.0f;\n"
"#endif\n"
"	}\n"
"\n"
"#if(PS_LTF != 0)\n"
"	t = mix(mix(c[0], c[1], dd.x), mix(c[2], c[3], dd.x), dd.y);\n"
"#else\n"
"	t = c[0];\n"
"#endif\n"
"\n"
"#if PS_AEM_FMT == FMT_32 && PS_PAL_FMT == 0 && PS_RTA_SRC_CORRECTION\n"
"	t.a = t.a * (128.5f / 255.0f);\n"
"#endif\n"
"\n"
"	// The 0.05f helps to fix the overbloom of sotc\n"
"	// I think the issue is related to the rounding of texture coodinate. The linear (from fixed unit)\n"
"	// interpolation could be slightly below the correct one.\n"
"	return trunc(t * 255.0f + 0.05f);\n"
"}\n"
"\n"
"#endif // NEEDS_TEX\n"
"\n"
"vec4 tfx(vec4 T, vec4 C)\n"
"{\n"
"	vec4 C_out;\n"
"	vec4 FxT = trunc((C * T) / 128.0f);\n"
"\n"
"#if (PS_TFX == 0)\n"
"	C_out = FxT;\n"
"#elif (PS_TFX == 1)\n"
"	C_out = T;\n"
"#elif (PS_TFX == 2)\n"
"	C_out.rgb = FxT.rgb + C.a;\n"
"	C_out.a = T.a + C.a;\n"
"#elif (PS_TFX == 3)\n"
"	C_out.rgb = FxT.rgb + C.a;\n"
"	C_out.a = T.a;\n"
"#else\n"
"	C_out = C;\n"
"#endif\n"
"\n"
"#if (PS_TCC == 0)\n"
"	C_out.a = C.a;\n"
"#endif\n"
"\n"
"#if (PS_TFX == 0) || (PS_TFX == 2) || (PS_TFX == 3)\n"
"	// Clamp only when it is useful\n"
"	C_out = min(C_out, 255.0f);\n"
"#endif\n"
"\n"
"	return C_out;\n"
"}\n"
"\n"
"bool atst(vec4 C)\n"
"{\n"
"	float a = C.a;\n"
"\n"
"#if (PS_ATST == 1)\n"
"	return (a <= AREF);\n"
"#elif (PS_ATST == 2)\n"
"	return (a >= AREF);\n"
"#elif (PS_ATST == 3)\n"
"	return (abs(a - AREF) <= 0.5f);\n"
"#elif (PS_ATST == 4)\n"
"	return (abs(a - AREF) >= 0.5f);\n"
"#else\n"
"	// nothing to do\n"
"	return true;\n"
"#endif\n"
"}\n"
"\n"
"void fog(inout vec4 C, float f)\n"
"{\n"
"#if PS_FOG != 0\n"
"	C.rgb = trunc(mix(FogColor, C.rgb, f));\n"
"#endif\n"
"}\n"
"\n"
"vec4 ps_color()\n"
"{\n"
"	//FIXME: maybe we can set gl_Position.w = q in VS\n"
"#if (PS_FST == 0)\n"
"	vec2 st = PSin.t_float.xy / vec2(PSin.t_float.w);\n"
"	vec2 st_int = PSin.t_int.zw / vec2(PSin.t_float.w);\n"
"#else\n"
"	// Note xy are normalized coordinate\n"
"	vec2 st = PSin.t_int.xy;\n"
"	vec2 st_int = PSin.t_int.zw;\n"
"#endif\n"
"\n"
"#if !NEEDS_TEX\n"
"	vec4 T = vec4(0.0);\n"
"#elif PS_CHANNEL_FETCH == 1\n"
"	vec4 T = fetch_red();\n"
"#elif PS_CHANNEL_FETCH == 2\n"
"	vec4 T = fetch_green();\n"
"#elif PS_CHANNEL_FETCH == 3\n"
"	vec4 T = fetch_blue();\n"
"#elif PS_CHANNEL_FETCH == 4\n"
"	vec4 T = fetch_alpha();\n"
"#elif PS_CHANNEL_FETCH == 5\n"
"	vec4 T = fetch_rgb();\n"
"#elif PS_CHANNEL_FETCH == 6\n"
"	vec4 T = fetch_gXbY();\n"
"#elif PS_DEPTH_FMT > 0\n"
"	// Integral coordinate\n"
"	vec4 T = sample_depth(st_int);\n"
"#else\n"
"	vec4 T = sample_color(st);\n"
"#endif\n"
"\n"
"	#if PS_SHUFFLE && !PS_READ16_SRC && !PS_SHUFFLE_SAME\n"
"		uvec4 denorm_c_before = uvec4(T);\n"
"		#if (PS_PROCESS_BA & SHUFFLE_READ)\n"
"			T.r = float((denorm_c_before.b << 3) & 0xF8);\n"
"			T.g = float(((denorm_c_before.b >> 2) & 0x38) | ((denorm_c_before.a << 6) & 0xC0));\n"
"			T.b = float((denorm_c_before.a << 1) & 0xF8);\n"
"			T.a = float(denorm_c_before.a & 0x80);\n"
"		#else\n"
"			T.r = float((denorm_c_before.r << 3) & 0xF8);\n"
"			T.g = float(((denorm_c_before.r >> 2) & 0x38) | ((denorm_c_before.g << 6) & 0xC0));\n"
"			T.b = float((denorm_c_before.g << 1) & 0xF8);\n"
"			T.a = float(denorm_c_before.g & 0x80);\n"
"		#endif\n"
"\n"
"		T.a = ((T.a >= 127.5f) ? TA.y : ((PS_AEM == 0 || any(bvec3(ivec3(T.rgb) & ivec3(0xF8)))) ? TA.x : 0.0f)) * 255.0f;\n"
"	#endif\n"
"	\n"
"	vec4 C = tfx(T, PSin.c);\n"
"\n"
"	atst(C);\n"
"\n"
"	fog(C, PSin.t_float.z);\n"
"\n"
"	return C;\n"
"}\n"
"\n"
"void ps_fbmask(inout vec4 C)\n"
"{\n"
"	// FIXME do I need special case for 16 bits\n"
"#if PS_FBMASK\n"
"	vec4 RT = trunc(fetch_rt() * 255.0f + 0.1f);\n"
"	C = vec4((uvec4(C) & ~FbMask) | (uvec4(RT) & FbMask));\n"
"#endif\n"
"}\n"
"\n"
"void ps_dither(inout vec3 C, float As)\n"
"{\n"
"#if PS_DITHER > 0 && PS_DITHER < 3\n"
"	#if PS_DITHER == 2\n"
"		ivec2 fpos = ivec2(gl_FragCoord.xy);\n"
"	#else\n"
"		ivec2 fpos = ivec2(gl_FragCoord.xy * RcpScaleFactor);\n"
"	#endif\n"
"		float value = DitherMatrix[fpos.y&3][fpos.x&3];\n"
"\n"
"	// The idea here is we add on the dither amount adjusted by the alpha before it goes to the hw blend\n"
"	// so after the alpha blend the resulting value should be the same as (Cs - Cd) * As + Cd + Dither.\n"
"	#if PS_DITHER_ADJUST\n"
"		#if PS_BLEND_C == 2\n"
"			float Alpha = Af;\n"
"		#else\n"
"			float Alpha = As;\n"
"		#endif\n"
"\n"
"		value *= Alpha > 0.0f ? min(1.0f / Alpha, 1.0f) : 1.0f;\n"
"	#endif\n"
"\n"
"	#if PS_ROUND_INV\n"
"		C -= value;\n"
"	#else\n"
"		C += value;\n"
"	#endif\n"
"#endif\n"
"}\n"
"\n"
"void ps_color_clamp_wrap(inout vec3 C)\n"
"{\n"
"	// When dithering the bottom 3 bits become meaningless and cause lines in the picture\n"
"	// so we need to limit the color depth on dithered items\n"
"#if SW_BLEND || (PS_DITHER > 0 && PS_DITHER < 3) || PS_FBMASK\n"
"\n"
"#if PS_DST_FMT == FMT_16 && PS_BLEND_MIX == 0 && PS_ROUND_INV\n"
"	C += 7.0f; // Need to round up, not down since the shader will invert\n"
"#endif\n"
"\n"
"	// Correct the Color value based on the output format\n"
"#if PS_COLCLIP == 0 && PS_HDR == 0\n"
"	// Standard Clamp\n"
"	C = clamp(C, vec3(0.0f), vec3(255.0f));\n"
"#endif\n"
"\n"
"	// FIXME rouding of negative float?\n"
"	// compiler uses trunc but it might need floor\n"
"\n"
"	// Warning: normally blending equation is mult(A, B) = A * B >> 7. GPU have the full accuracy\n"
"	// GS: Color = 1, Alpha = 255 => output 1\n"
"	// GPU: Color = 1/255, Alpha = 255/255 * 255/128 => output 1.9921875\n"
"#if PS_DST_FMT == FMT_16 && PS_DITHER < 3 && (PS_BLEND_MIX == 0 || PS_DITHER)\n"
"	// In 16 bits format, only 5 bits of colors are used. It impacts shadows computation of Castlevania\n"
"	C = vec3(ivec3(C) & ivec3(0xF8));\n"
"#elif PS_COLCLIP == 1 || PS_HDR == 1\n"
"	C = vec3(ivec3(C) & ivec3(0xFF));\n"
"#endif\n"
"\n"
"#endif\n"
"}\n"
"\n"
"void ps_blend(inout vec4 Color, inout vec4 As_rgba)\n"
"{\n"
"float As = As_rgba.a;\n"
"\n"
"#if SW_BLEND\n"
"\n"
"	// PABE\n"
"#if PS_PABE\n"
"	// No blending so early exit\n"
"	if (As < 1.0f)\n"
"		return;\n"
"#endif\n"
"\n"
"#if SW_BLEND_NEEDS_RT\n"
"	vec4 RT = fetch_rt();\n"
"#else\n"
"	// Not used, but we define it to make the selection below simpler.\n"
"	vec4 RT = vec4(0.0f);\n"
"#endif\n"
"\n"
"	#if PS_RTA_CORRECTION\n"
"		float Ad = trunc(RT.a * 128.0f + 0.1f) / 128.0f;\n"
"	#else\n"
"		float Ad = trunc(RT.a * 255.0f + 0.1f) / 128.0f;\n"
"	#endif\n"
"\n"
"	#if PS_SHUFFLE && SW_BLEND_NEEDS_RT\n"
"		uvec4 denorm_rt = uvec4(RT);\n"
"		#if (PS_PROCESS_BA & SHUFFLE_WRITE)\n"
"			RT.r = float((denorm_rt.b << 3) & 0xF8);\n"
"			RT.g = float(((denorm_rt.b >> 2) & 0x38) | ((denorm_rt.a << 6) & 0xC0));\n"
"			RT.b = float((denorm_rt.a << 1) & 0xF8);\n"
"			RT.a = float(denorm_rt.a & 0x80);\n"
"		#else\n"
"			RT.r = float((denorm_rt.r << 3) & 0xF8);\n"
"			RT.g = float(((denorm_rt.r >> 2) & 0x38) | ((denorm_rt.g << 6) & 0xC0));\n"
"			RT.b = float((denorm_rt.g << 1) & 0xF8);\n"
"			RT.a = float(denorm_rt.g & 0x80);\n"
"		#endif\n"
"	#endif\n"
"		\n"
"	// Let the compiler do its jobs !\n"
"	vec3 Cd = trunc(RT.rgb * 255.0f + 0.1f);\n"
"	vec3 Cs = Color.rgb;\n"
"\n"
"#if PS_BLEND_A == 0\n"
"	vec3 A = Cs;\n"
"#elif PS_BLEND_A == 1\n"
"	vec3 A = Cd;\n"
"#else\n"
"	vec3 A = vec3(0.0f);\n"
"#endif\n"
"\n"
"#if PS_BLEND_B == 0\n"
"	vec3 B = Cs;\n"
"#elif PS_BLEND_B == 1\n"
"	vec3 B = Cd;\n"
"#else\n"
"	vec3 B = vec3(0.0f);\n"
"#endif\n"
"\n"
"#if PS_BLEND_C == 0\n"
"	float C = As;\n"
"#elif PS_BLEND_C == 1\n"
"	float C = Ad;\n"
"#else\n"
"	float C = Af;\n"
"#endif\n"
"\n"
"#if PS_BLEND_D == 0\n"
"	vec3 D = Cs;\n"
"#elif PS_BLEND_D == 1\n"
"	vec3 D = Cd;\n"
"#else\n"
"	vec3 D = vec3(0.0f);\n"
"#endif\n"
"\n"
"	// As/Af clamp alpha for Blend mix\n"
"	// We shouldn't clamp blend mix with blend hw 1 as we want alpha higher\n"
"	float C_clamped = C;\n"
"#if PS_BLEND_MIX > 0 && PS_BLEND_HW != 1 && PS_BLEND_HW != 2\n"
"	C_clamped = min(C_clamped, 1.0f);\n"
"#endif\n"
"\n"
"#if PS_BLEND_A == PS_BLEND_B\n"
"	Color.rgb = D;\n"
"// In blend_mix, HW adds on some alpha factor * dst.\n"
"// Truncating here wouldn't quite get the right result because it prevents the <1 bit here from combining with a <1 bit in dst to form a ≥1 amount that pushes over the truncation.\n"
"// Instead, apply an offset to convert HW's round to a floor.\n"
"// Since alpha is in 1/128 increments, subtracting (0.5 - 0.5/128 == 127/256) would get us what we want if GPUs blended in full precision.\n"
"// But they don't.  Details here: https://github.com/PCSX2/pcsx2/pull/6809#issuecomment-1211473399\n"
"// Based on the scripts at the above link, the ideal choice for Intel GPUs is 126/256, AMD 120/256.  Nvidia is a lost cause.\n"
"// 124/256 seems like a reasonable compromise, providing the correct answer 99.3% of the time on Intel (vs 99.6% for 126/256), and 97% of the time on AMD (vs 97.4% for 120/256).\n"
"#elif PS_BLEND_MIX == 2\n"
"	Color.rgb = ((A - B) * C_clamped + D) + (124.0f/256.0f);\n"
"#elif PS_BLEND_MIX == 1\n"
"	Color.rgb = ((A - B) * C_clamped + D) - (124.0f/256.0f);\n"
"#else\n"
"	Color.rgb = trunc((A - B) * C + D);\n"
"#endif\n"
"\n"
"#if PS_BLEND_HW == 1\n"
"	// As or Af\n"
"	As_rgba.rgb = vec3(C);\n"
"	// Subtract 1 for alpha to compensate for the changed equation,\n"
"	// if c.rgb > 255.0f then we further need to adjust alpha accordingly,\n"
"	// we pick the lowest overflow from all colors because it's the safest,\n"
"	// we divide by 255 the color because we don't know Cd value,\n"
"	// changed alpha should only be done for hw blend.\n"
"	vec3 alpha_compensate = max(vec3(1.0f), Color.rgb / vec3(255.0f));\n"
"	As_rgba.rgb -= alpha_compensate;\n"
"#elif PS_BLEND_HW == 2\n"
"	// Since we can't do Cd*(Alpha + 1) - Cs*Alpha in hw blend\n"
"	// what we can do is adjust the Cs value that will be\n"
"	// subtracted, this way we can get a better result in hw blend.\n"
"	// Result is still wrong but less wrong than before.\n"
"	float division_alpha = 1.0f + C;\n"
"	Color.rgb /= vec3(division_alpha);\n"
"#elif PS_BLEND_HW == 3\n"
"	// As, Ad or Af clamped.\n"
"	As_rgba.rgb = vec3(C_clamped);\n"
"	// Cs*(Alpha + 1) might overflow, if it does then adjust alpha value\n"
"	// that is sent on second output to compensate.\n"
"	vec3 overflow_check = (Color.rgb - vec3(255.0f)) / 255.0f;\n"
"	vec3 alpha_compensate = max(vec3(0.0f), overflow_check);\n"
"	As_rgba.rgb -= alpha_compensate;\n"
"#endif\n"
"\n"
"#else\n"
"	// Needed for Cd * (As/Ad/F + 1) blending modes\n"
"#if PS_BLEND_HW == 1\n"
"	Color.rgb = vec3(255.0f);\n"
"#elif PS_BLEND_HW == 2\n"
"	// Cd*As,Cd*Ad or Cd*F\n"
"\n"
"#if PS_BLEND_C == 2\n"
"	float Alpha = Af;\n"
"#else\n"
"	float Alpha = As;\n"
"#endif\n"
"\n"
"	Color.rgb = max(vec3(0.0f), (Alpha - vec3(1.0f)));\n"
"	Color.rgb *= vec3(255.0f);\n"
"#elif PS_BLEND_HW == 3 && PS_RTA_CORRECTION == 0\n"
"	// Needed for Cs*Ad, Cs*Ad + Cd, Cd - Cs*Ad\n"
"	// Multiply Color.rgb by (255/128) to compensate for wrong Ad/255 value when rgb are below 128.\n"
"	// When any color channel is higher than 128 then adjust the compensation automatically\n"
"	// to give us more accurate colors, otherwise they will be wrong.\n"
"	// The higher the value (>128) the lower the compensation will be.\n"
"	float max_color = max(max(Color.r, Color.g), Color.b);\n"
"	float color_compensate = 255.0f / max(128.0f, max_color);\n"
"	Color.rgb *= vec3(color_compensate);\n"
"#elif PS_BLEND_HW == 4\n"
"	// Needed for Cd * (1 - Ad)\n"
"	Color.rgb = vec3(128.0f);\n"
"#endif\n"
"\n"
"#endif\n"
"}\n"
"\n"
"void ps_main()\n"
"{\n"
"#if PS_SCANMSK & 2\n"
"	// fail depth test on prohibited lines\n"
"	if ((int(gl_FragCoord.y) & 1) == (PS_SCANMSK & 1))\n"
"		discard;\n"
"#endif\n"
"\n"
"#if PS_DATE >= 5\n"
"\n"
"#if PS_WRITE_RG == 1\n"
"	// Pseudo 16 bits access.\n"
"	float rt_a = fetch_rt().g;\n"
"#else\n"
"	float rt_a = fetch_rt().a;\n"
"#endif\n"
"\n"
"#if (PS_DATE & 3) == 1\n"
"	// DATM == 0: Pixel with alpha equal to 1 will failed\n"
"	#if PS_RTA_CORRECTION\n"
"		bool bad = (254.5f / 255.0f) < rt_a;\n"
"	#else\n"
"		bool bad = (127.5f / 255.0f) < rt_a;\n"
"	#endif\n"
"#elif (PS_DATE & 3) == 2\n"
"	// DATM == 1: Pixel with alpha equal to 0 will failed\n"
"	#if PS_RTA_CORRECTION\n"
"		bool bad = rt_a < (254.5f / 255.0f);\n"
"	#else\n"
"		bool bad = rt_a < (127.5f / 255.0f);\n"
"	#endif\n"
"#endif\n"
"\n"
"	if (bad) {\n"
"		discard;\n"
"	}\n"
"\n"
"#endif\n"
"\n"
"#if PS_DATE == 3\n"
"	int stencil_ceil = int(texelFetch(img_prim_min, ivec2(gl_FragCoord.xy), 0).r);\n"
"	// Note gl_PrimitiveID == stencil_ceil will be the primitive that will update\n"
"	// the bad alpha value so we must keep it.\n"
"\n"
"	if (gl_PrimitiveID > stencil_ceil) {\n"
"		discard;\n"
"	}\n"
"#endif\n"
"\n"
"	vec4 C = ps_color();\n"
"	bool atst_pass = atst(C);\n"
"\n"
"#if PS_AFAIL == 0 // KEEP or ATST off\n"
"	if (!atst_pass)\n"
"		discard;\n"
"#endif\n"
"\n"
"	// Must be done before alpha correction\n"
"\n"
"	// AA (Fixed one) will output a coverage of 1.0 as alpha\n"
"#if PS_FIXED_ONE_A\n"
"	C.a = 128.0f;\n"
"#endif\n"
"\n"
"#if SW_AD_TO_HW\n"
"	#if PS_RTA_CORRECTION\n"
"		vec4 RT = trunc(fetch_rt() * 128.0f + 0.1f);\n"
"	#else\n"
"		vec4 RT = trunc(fetch_rt() * 255.0f + 0.1f);\n"
"	#endif\n"
"\n"
"	vec4 alpha_blend = vec4(RT.a / 128.0f);\n"
"#else\n"
"	vec4 alpha_blend = vec4(C.a / 128.0f);\n"
"#endif\n"
"\n"
"	// Correct the ALPHA value based on the output format\n"
"#if (PS_DST_FMT == FMT_16)\n"
"	float A_one = 128.0f; // alpha output will be 0x80\n"
"	C.a = (PS_FBA != 0) ? A_one : step(128.0f, C.a) * A_one;\n"
"#elif (PS_DST_FMT == FMT_32) && (PS_FBA != 0)\n"
"	if(C.a < 128.0f) C.a += 128.0f;\n"
"#endif\n"
"\n"
"	// Get first primitive that will write a failling alpha value\n"
"#if PS_DATE == 1\n"
"	// DATM == 0\n"
"	// Pixel with alpha equal to 1 will failed (128-255)\n"
"	SV_Target0 = (C.a > 127.5f) ? vec4(gl_PrimitiveID) : vec4(0x7FFFFFFF);\n"
"	return;\n"
"#elif PS_DATE == 2\n"
"	// DATM == 1\n"
"	// Pixel with alpha equal to 0 will failed (0-127)\n"
"	SV_Target0 = (C.a < 127.5f) ? vec4(gl_PrimitiveID) : vec4(0x7FFFFFFF);\n"
"	return;\n"
"#endif\n"
"\n"
"	ps_blend(C, alpha_blend);\n"
"\n"
"#if PS_SHUFFLE\n"
"	#if !PS_READ16_SRC && !PS_SHUFFLE_SAME\n"
"		uvec4 denorm_c_after = uvec4(C);\n"
"		#if (PS_PROCESS_BA & SHUFFLE_READ)\n"
"			C.b = float(((denorm_c_after.r >> 3) & 0x1F) | ((denorm_c_after.g << 2) & 0xE0));\n"
"			C.a = float(((denorm_c_after.g >> 6) & 0x3) | ((denorm_c_after.b >> 1) & 0x7C) | (denorm_c_after.a & 0x80));\n"
"		#else\n"
"			C.r = float(((denorm_c_after.r >> 3) & 0x1F) | ((denorm_c_after.g << 2) & 0xE0));\n"
"			C.g = float(((denorm_c_after.g >> 6) & 0x3) | ((denorm_c_after.b >> 1) & 0x7C) | (denorm_c_after.a & 0x80));\n"
"		#endif\n"
"	#endif\n"
"\n"
"	// Special case for 32bit input and 16bit output, shuffle used by The Godfather\n"
"	#if PS_SHUFFLE_SAME\n"
"		uvec4 denorm_c = uvec4(C);\n"
"	#if (PS_PROCESS_BA & SHUFFLE_READ)\n"
"		C = vec4(float((denorm_c.b & 0x7Fu) | (denorm_c.a & 0x80u)));\n"
"	#else\n"
"		C.ga = C.rg;\n"
"	#endif\n"
"	// Copy of a 16bit source in to this target\n"
"	#elif PS_READ16_SRC\n"
"		uvec4 denorm_c = uvec4(C);\n"
"		uvec2 denorm_TA = uvec2(vec2(TA.xy) * 255.0f + 0.5f);\n"
"		\n"
"		C.rb = vec2(float((denorm_c.r >> 3) | (((denorm_c.g >> 3) & 0x7u) << 5)));\n"
"		if (bool(denorm_c.a & 0x80u))\n"
"			C.ga = vec2(float((denorm_c.g >> 6) | ((denorm_c.b >> 3) << 2) | (denorm_TA.y & 0x80u)));\n"
"		else\n"
"			C.ga = vec2(float((denorm_c.g >> 6) | ((denorm_c.b >> 3) << 2) | (denorm_TA.x & 0x80u)));\n"
"	#elif PS_SHUFFLE_ACROSS\n"
"		#if(PS_PROCESS_BA == SHUFFLE_READWRITE && PS_PROCESS_RG == SHUFFLE_READWRITE)\n"
"			C.rb = C.br;\n"
"			float g_temp = C.g;\n"
"			\n"
"			C.g = C.a;\n"
"			C.a = g_temp;\n"
"		#elif(PS_PROCESS_BA & SHUFFLE_READ)\n"
"			C.rb = C.bb;\n"
"			C.ga = C.aa;\n"
"		#else\n"
"			C.rb = C.rr;\n"
"			C.ga = C.gg;\n"
"		#endif // PS_PROCESS_BA\n"
"	#endif // PS_SHUFFLE_ACROSS\n"
"#endif // PS_SHUFFLE\n"
"\n"
"	ps_dither(C.rgb, alpha_blend.a);\n"
"\n"
"	// Color clamp/wrap needs to be done after sw blending and dithering\n"
"	ps_color_clamp_wrap(C.rgb);\n"
"\n"
"	ps_fbmask(C);\n"
"\n"
"#if PS_AFAIL == 3 // RGB_ONLY\n"
"	// Use alpha blend factor to determine whether to update A.\n"
"	alpha_blend.a = float(atst_pass);\n"
"#endif\n"
"\n"
"#if !PS_NO_COLOR\n"
"	#if PS_RTA_CORRECTION\n"
"		SV_Target0.a = C.a / 128.0f;\n"
"	#else\n"
"		SV_Target0.a = C.a / 255.0f;\n"
"	#endif\n"
"	#if PS_HDR == 1\n"
"		SV_Target0.rgb = vec3(C.rgb / 65535.0f);\n"
"	#else\n"
"		SV_Target0.rgb = C.rgb / 255.0f;\n"
"	#endif\n"
"	#if !PS_NO_COLOR1\n"
"		SV_Target1 = alpha_blend;\n"
"	#endif\n"
"#endif\n"
"\n"
"#if PS_ZCLAMP\n"
"	gl_FragDepth = min(gl_FragCoord.z, MaxDepthPS);\n"
"#endif\n"
"}\n"
;
