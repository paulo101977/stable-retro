#version 450
layout(local_size_x = 8, local_size_y = 8) in;

layout(set = 0, binding = 0, rgba8) uniform writeonly mediump image2D uOutput;
layout(set = 0, binding = 1) uniform mediump sampler2D uY;
layout(set = 0, binding = 2) uniform mediump sampler2D uCb;
layout(set = 0, binding = 3) uniform mediump sampler2D uCr;

layout(set = 1, binding = 0) uniform UBO
{
    mediump mat4 yuv_to_rgb;
    mediump mat4 primary_conversion;
    uvec2 resolution;
    vec2 inv_resolution;
    vec2 chroma_siting;
    vec2 chroma_clamp;
    float unorm_rescale;
};

const int PASSTHROUGH = 0;
const int BT2087 = 1;
layout(constant_id = 0) const int TRANSFER = PASSTHROUGH;
layout(constant_id = 1) const int NUM_PLANES = 3;
layout(constant_id = 2) const bool NV21 = false;

#define D(x) (((x) - 0.5) / 255.0)
const mediump float dither[] = float[](
    D(0.0625), D(0.5625), D(0.1875), D(0.6875),
    D(0.8125), D(0.3125), D(0.9375), D(0.4375),
    D(0.25), D(0.75), D(0.125), D(0.625),
    D(1.00), D(0.5), D(0.875), D(0.375));

void main()
{
    uvec2 coord = gl_GlobalInvocationID.xy;
    if (all(lessThan(coord, resolution)))
    {
        vec2 fcoord = vec2(coord);

        // Reconstruct full resolution Y'CbCr.
        vec2 luma_coord = (fcoord + 0.5) * inv_resolution;
        vec2 chroma_coord = (fcoord + chroma_siting) * inv_resolution;

        // Avoid filtering against garbage.
        // We only filter luma with nearest, so it's fine.
        chroma_coord = min(chroma_coord, chroma_clamp);

        mediump float y = textureLod(uY, luma_coord, 0.0).x;
        mediump float cb, cr;

        if (NUM_PLANES == 3)
        {
            cb = textureLod(uCb, chroma_coord, 0.0).x;
            cr = textureLod(uCr, chroma_coord, 0.0).x;
        }
        else if (NUM_PLANES == 2)
        {
            mediump vec2 cbcr = textureLod(uCb, chroma_coord, 0.0).xy;
            if (NV21)
            {
                // Could use ImageView swizzles here, but eeeeeh.
                cb = cbcr.y;
                cr = cbcr.x;
            }
            else
            {
                cb = cbcr.x;
                cr = cbcr.y;
            }
        }
        else
        {
            cb = 128.0 / 255.0;
            cr = 128.0 / 255.0;
        }

        mediump vec3 rgb = vec3(y, cb, cr) * unorm_rescale;
        rgb = (yuv_to_rgb * vec4(rgb, 1.0)).rgb;

        // Apply EOTF.
        rgb = clamp(rgb, vec3(0.0), vec3(1.0));

        if (TRANSFER == BT2087)
        {
            rgb = pow(rgb, vec3(2.4));
            // Convert primaries to BT.709 (sRGB).
            rgb = (primary_conversion * vec4(rgb, 0.0)).rgb;
            rgb = clamp(rgb, vec3(0.0), vec3(1.0));

            // Horrible banding if we encode sRGB here, even with dither. Not sure what the intended approach is.
            rgb = pow(rgb, vec3(1.0 / 2.4));
        }

        // Dither the output to avoid banding in the OETF(EOTF(x)) conversion.
        rgb += dither[4u * (gl_LocalInvocationID.y & 3u) + (gl_LocalInvocationID.x & 3u)];

        imageStore(uOutput, ivec2(coord), vec4(rgb, 1.0));
    }
}