#version 450
#extension GL_EXT_samplerless_texture_functions : require
#extension GL_EXT_nonuniform_qualifier : require
layout(local_size_x = 64) in;

#define CLUSTERER_GLOBAL
#define VOLUMETRIC_DIFFUSE_PREV_TEXTURES
#define VOLUMETRIC_DIFFUSE_ATLAS_SET 1
#include "../inc/subgroup_extensions.h"
#include "../inc/render_parameters.h"

#include "clusterer_data.h"
#include "volumetric_probe_hash.h"
#include "volumetric_diffuse.h"

layout(set = 3, binding = 2) uniform ClusterTransforms
{
    ClustererGlobalTransforms cluster_global_transforms;
};

#include "lighting_irradiance.h"

layout(push_constant) uniform Registers
{
    int gbuffer_layer;
    int face_resolution;
    float inv_orig_face_resolution;
    float inv_patch_resolution2;
    uint hash_range;
} registers;

const int NumProbeLayers = 4;

layout(rgba16f, set = 2, binding = 0) writeonly uniform image3D uAmbient;
layout(set = 2, binding = 1) uniform texture2DArray uProbeEmissive;
layout(set = 2, binding = 2) uniform texture2DArray uProbeAlbedo;
layout(set = 2, binding = 3) uniform texture2DArray uProbeNormal;
layout(set = 2, binding = 4) uniform texture2DArray uProbeDepth;

layout(set = 2, binding = 5) readonly buffer WorkList
{
    uint work_list[];
};

layout(set = 2, binding = 6) uniform samplerCube uSkyLight;

layout(set = 3, binding = 0) uniform Transforms
{
    vec3 probe_pos_jitter[NumProbeLayers];
} transforms;

layout(set = 3, binding = 1) uniform PerProbe
{
    vec4 texture_to_world[3];
    vec4 world_to_texture[3];
    vec3 inv_probe_resolution;
    uvec2 probe_size_xy;
};

#ifndef PI
#define PI 3.1415628
#endif

vec3 get_probe_jitter(uvec2 probe_xy)
{
    return transforms.probe_pos_jitter[
            (registers.gbuffer_layer +
            (probe_xy.x & 1u) +
            (probe_xy.y & 1u) * 2u) &
            (NumProbeLayers - 1u)];
}

mat3 sample_patch(ivec3 coord, vec3 pos, vec3 world_pos, bool do_lighting)
{
    float l2 = dot(pos, pos);
    float inv_l = inversesqrt(l2);
    vec3 n = pos * inv_l;
    vec3 color;

    // All lanes need to participate since we do subgroup based culling.
    mediump vec3 normal = normalize(texelFetch(uProbeNormal, coord, 0).xyz * 2.0 - 1.0);
    mediump vec3 irradiance_light = compute_irradiance_lighting(
            world_pos, normal,
            directional.direction, directional.color, do_lighting);

    if (do_lighting)
    {
        vec3 emissive = texelFetch(uProbeEmissive, coord, 0).rgb;
        color = emissive;
        mediump vec3 albedo = texelFetch(uProbeAlbedo, coord, 0).rgb;
        color += min(albedo, vec3(0.95)) * irradiance_light;
    }
    else
    {
        // Technically we have to vary lighting based on pixel Y, not camera Y,
        // but any difference close to camera is trivial.
        color = textureLod(uSkyLight, n, 0.0).rgb;
    }

    // We have 4 patches per face, so it cancels out the 4.0 / (res * res) computation.
    // Formula for area derived from estimating the area coverage of a cubemap texel
    // when projected over sphere.
    // n = [u, v, 1]
    // l = length(n)
    // n' = n / l
    // A ~= dot(n', cross((n + du) / length(n + du) - n', (n + dv) / length(n + dv) - n')
    // A ~= dot(n', cross(du / l, dv / l))
    // A ~= dot(n', dz)
    // A ~= dot(n', [0, 0, (2 / (l * res)) * (2 / (l * res))])
    // A ~= 4.0 / (res^2 * l^3)
    float area = registers.inv_patch_resolution2 * inv_l * inv_l * inv_l;

    // Cosine-weight the area here.
    vec3 hemisphere_area = abs(n) * area;

    return mat3(
        color * hemisphere_area.x,
        color * hemisphere_area.y,
        color * hemisphere_area.z);
}

shared vec3 shared_patch_contributions[6 * 2 * 2][3];

#if defined(SUBGROUP_COMPUTE_FULL) && defined(SUBGROUP_OPS)
#define CLUSTER_ADD
#endif

#if !defined(CLUSTER_ADD)
shared vec3 shared_colors[gl_WorkGroupSize.x][3];
#endif

#include "../inc/cube_coordinates.h"

#define M(b) (1u << (b))
const uint patch_mask_per_face[6] = uint[](
    (0xfu << 0) | M(9) | M(11) | M(13) | M(15) | M(17) | M(19) | M(20) | M(22),
    (0xfu << 4) | M(8) | M(10) | M(12) | M(14) | M(16) | M(18) | M(21) | M(23),
    (0xfu << 8) | M(0) | M(1) | M(4) | M(5) | M(20) | M(21) | M(16) | M(17),
    (0xfu << 12) | M(2) | M(3) | M(6) | M(7) | M(18) | M(19) | M(22) | M(23),
    (0xfu << 16) | M(0) | M(2) | M(5) | M(7) | M(10) | M(11) | M(12) | M(13),
    (0xfu << 20) | M(1) | M(3) | M(4) | M(6) | M(8) | M(9) | M(14) | M(15));

uvec3 unpack_work(uint c)
{
    return (uvec3(c) >> uvec3(0, 10, 20)) & 0x3ffu;
}

ivec2 interleave_coord(uint index)
{
    // Ensure that groups of 4x4 pixels group together.
    uint lo_x = bitfieldExtract(index, 0, 2);
    uint lo_y = bitfieldExtract(index, 2, 2);
    uint hi_x = bitfieldExtract(index, 4, 1) << 2u;
    uint hi_y = bitfieldExtract(index, 5, 1) << 2u;
    return ivec2(lo_x | hi_x, lo_y | hi_y);
}

void main()
{
    uvec3 probe_index = unpack_work(work_list[gl_WorkGroupID.x]);
    ivec2 probe_size = ivec2(probe_size_xy);

#if defined(SUBGROUP_COMPUTE_FULL)
    int local_index = int(gl_SubgroupID * gl_SubgroupSize + gl_SubgroupInvocationID);
#else
    int local_index = int(gl_LocalInvocationIndex);
#endif

    ivec2 patch_coord = interleave_coord(local_index);

    for (int face = 0; face < 6; face++)
    {
        int probe_x = 6 * int(probe_index.x) + face;
        int probe_y = int(probe_index.z * probe_size.y + probe_index.y);
        ivec2 base_probe_coord = ivec2(probe_x, probe_y) * registers.face_resolution;
        ivec2 tex_coord = base_probe_coord + patch_coord;
        ivec3 tex_coord_layer = ivec3(tex_coord, registers.gbuffer_layer);

        uvec2 hashed_offset = volumetric_probe_hash(tex_coord_layer, registers.hash_range);

        vec2 xy = vec2(patch_coord * registers.hash_range + hashed_offset) + 0.5;
        vec2 uv = xy * registers.inv_orig_face_resolution;
        vec2 clip_xy = 2.0 * uv - 1.0;
        vec3 pos = base_dirs[face] + clip_xy.x * pos_du[face] + clip_xy.y * pos_dv[face];

        vec3 tex_space = (vec3(probe_index) + 0.5 + get_probe_jitter(probe_index.xy)) * inv_probe_resolution;
        vec3 probe_pos = vec3(
            dot(texture_to_world[0], vec4(tex_space, 1.0)),
            dot(texture_to_world[1], vec4(tex_space, 1.0)),
            dot(texture_to_world[2], vec4(tex_space, 1.0)));

        float linear_d = texelFetch(uProbeDepth, tex_coord_layer, 0).x;
        vec3 world = pos * linear_d + probe_pos;

        mat3 patch_contribution = sample_patch(tex_coord_layer, pos, world, linear_d != 0.0);

#if defined(CLUSTER_ADD)
        vec3 summed_contributions0 = subgroupClusteredAdd(patch_contribution[0], 16);
        vec3 summed_contributions1 = subgroupClusteredAdd(patch_contribution[1], 16);
        vec3 summed_contributions2 = subgroupClusteredAdd(patch_contribution[2], 16);

        int masked = local_index & 15;
        if (masked == 0)
        {
            int patch_index = local_index >> 4;
            int shared_patch_index = 4 * face + patch_index;
            shared_patch_contributions[shared_patch_index][0] = summed_contributions0;
            shared_patch_contributions[shared_patch_index][1] = summed_contributions1;
            shared_patch_contributions[shared_patch_index][2] = summed_contributions2;
        }
#else
        shared_colors[local_index][0] = patch_contribution[0];
        shared_colors[local_index][1] = patch_contribution[1];
        shared_colors[local_index][2] = patch_contribution[2];

#define ITERATE(l) \
    if ((local_index & 15) < l) { \
        shared_colors[local_index][0] += shared_colors[local_index + l][0]; \
        shared_colors[local_index][1] += shared_colors[local_index + l][1]; \
        shared_colors[local_index][2] += shared_colors[local_index + l][2]; \
    }

        barrier();
        ITERATE(8)
        barrier();
        ITERATE(4)
        barrier();
        ITERATE(2)
        barrier();
        int masked = local_index & 15;
        if (masked < 3)
        {
            int patch_index = local_index >> 4;
            int shared_patch_index = 4 * face + patch_index;
            shared_patch_contributions[shared_patch_index][masked] =
                shared_colors[16 * patch_index + 0][masked] +
                shared_colors[16 * patch_index + 1][masked];
        }
        barrier();
#endif
    }

#if defined(CLUSTER_ADD)
    barrier();
#endif

    int face = local_index;
    if (face < 6)
    {
        uint mask = patch_mask_per_face[face];
        vec3 total = vec3(0.0);
        while (mask != 0u)
        {
            int bit = findLSB(mask);
            mask &= ~(1u << uint(bit));
            total += shared_patch_contributions[bit][face >> 1u];
        }

        ivec3 ambient_coord = ivec3(probe_index) + ivec3(face * probe_size.x, 0, 0);
        total /= PI;
        imageStore(uAmbient, ambient_coord, vec4(total, 0.0));
    }
}
