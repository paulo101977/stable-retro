#version 450
layout(local_size_x = 8, local_size_y = 8) in;

layout(set = 0, binding = 0) uniform mediump sampler2D uInputChroma;
layout(set = 0, binding = 1) writeonly uniform mediump image2D uOutputChroma;

layout(push_constant) uniform Registers
{
    uvec2 resolution;
    vec2 base_uv;
    vec2 inv_resolution;
} registers;

// Arbitrary hackery.
const mediump float kernel[5] = float[](-0.2, 0.3, 1.0, 0.3, -0.2);

mediump float weight(int x, int y)
{
    mediump float fx = kernel[x + 2];
    mediump float fy = kernel[y + 2];
    return fx * fy;
}

void main()
{
    uvec2 coord = gl_GlobalInvocationID.xy;
    if (all(lessThan(coord, registers.resolution)))
    {
        vec2 uv11 = registers.base_uv + vec2(coord) * registers.inv_resolution;

        mediump vec2 chroma = vec2(0.0);
        mediump float W = 0.0;
        for (int y = -2; y <= 2; y++)
        {
            for (int x = -2; x <= 2; x++)
            {
                vec2 uv = uv11 + (vec2(x, y) * 0.5) * registers.inv_resolution;
                mediump float w = weight(x, y);
                W += w;
                chroma += w * textureLod(uInputChroma, uv, 0.0).xy;
            }
        }

        chroma /= W;
        imageStore(uOutputChroma, ivec2(coord), chroma.xyxy);
    }
}
