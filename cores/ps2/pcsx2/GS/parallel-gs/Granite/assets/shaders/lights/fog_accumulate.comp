#version 450
layout(local_size_x = 8, local_size_y = 8) in;

layout(rgba16f, set = 0, binding = 0) writeonly uniform mediump image3D uFog;
layout(set = 0, binding = 1) uniform mediump sampler3D uLightDensity;

layout(std430, push_constant) uniform Registers
{
    vec3 inv_resolution;
    uvec3 count;
} registers;

mediump vec4 accumulate_scattering(mediump vec4 color_and_density_front, mediump vec4 color_and_density_back)
{
    vec3 light = color_and_density_front.rgb +
                 color_and_density_back.rgb * (exp2(-color_and_density_front.a) * color_and_density_back.a);
    return vec4(light, color_and_density_front.a + color_and_density_back.a);
}

void main()
{
    if (any(greaterThanEqual(gl_GlobalInvocationID.xy, registers.count.xy)))
        return;

    mediump int slices = int(registers.count.z);
    mediump ivec2 xy = ivec2(gl_GlobalInvocationID.xy);
    vec2 uv = (vec2(xy) + 0.5) * registers.inv_resolution.xy;

    mediump vec4 front = vec4(0.0);
    for (mediump int z = 0; z < slices; z++)
    {
        float w = (float(z) + 0.5) * registers.inv_resolution.z;
        vec3 uvw = vec3(uv, w);

        const float w3 = 1.0 / (1.375 * 32.0);
        const float w2 = 1.0 / (1.375 * 16.0);
        const float w1 = 1.0 / (1.375 * 8.0);
        const float w0 = 1.0 / (1.375 * 4.0);
        mediump vec4 back = vec4(0.0);
#define TAP(x, y, z, w) back += (w) * textureLodOffset(uLightDensity, uvw, 0.0, ivec3(x, y, z))
        TAP(0, 0, 0, w0);

        TAP(0, -1, -1, w2);
        TAP(-1, 0, -1, w2);
        TAP(1, 0, -1, w2);
        TAP(0, +1, -1, w2);
        TAP(-1, -1, -1, w3);
        TAP(1, -1, -1, w3);
        TAP(-1, +1, -1, w3);
        TAP(1, +1, -1, w3);

        TAP(0, -1, 0, w1);
        TAP(-1, 0, 0, w1);
        TAP(1, 0, 0, w1);
        TAP(0, +1, 0, w1);
        TAP(1, -1, 0, w2);
        TAP(-1, -1, 0, w2);
        TAP(-1, +1, 0, w2);
        TAP(1, +1, 0, w2);

        front = accumulate_scattering(front, back);
        mediump vec4 color_and_density = vec4(front.rgb, exp2(-front.a));
        imageStore(uFog, ivec3(xy, z), color_and_density);
    }
}