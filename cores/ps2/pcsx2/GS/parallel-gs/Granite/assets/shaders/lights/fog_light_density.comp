#version 450
layout(local_size_x = 64) in;

#extension GL_EXT_samplerless_texture_functions : require

#include "../inc/subgroup_extensions.h"
#ifdef FOG_REGIONS
#extension GL_EXT_nonuniform_qualifier : require
#include "linear_clamp_sampler.h"
#endif

#include "volumetric_fog.h"
#include "lighting_scatter.h"
#include "../inc/render_parameters.h"
#include "../inc/global_bindings.h"

#ifndef TEMPORAL_REPROJECTION
#define TEMPORAL_REPROJECTION 0
#endif

#ifdef FOG_REGIONS
const int CLUSTERER_MAX_FOG_REGIONS = 128;
struct FogRegionParameters
{
    vec4 world_to_texture[3];
    vec4 world_lo;
    vec4 world_hi;
};

layout(std140, set = 0, binding = BINDING_GLOBAL_VOLUMETRIC_FOG_PARAMETERS) uniform FogRegions
{
    int bindless_index_offset;
    int num_regions;
    FogRegionParameters regions[CLUSTERER_MAX_FOG_REGIONS];
} fog_regions;

layout(set = 1, binding = 0) uniform mediump texture3D uFogVolumes[];

mediump float fade_coeff(vec3 local_pos)
{
    vec3 x = abs(local_pos - 0.5);
    return clamp(8.0 * (0.5 - max(max(x.x, x.y), x.z)), 0.0, 1.0);
}

mediump float compute_fog_density(int index, FogRegionParameters region, vec3 world_pos)
{
    vec3 local_pos = vec3(
        dot(vec4(world_pos, 1.0), region.world_to_texture[0]),
        dot(vec4(world_pos, 1.0), region.world_to_texture[1]),
        dot(vec4(world_pos, 1.0), region.world_to_texture[2]));

    mediump float density = fade_coeff(local_pos);
    if (density > 0.0)
    {
        density *=
            textureLod(nonuniformEXT(sampler3D(uFogVolumes[index + fog_regions.bindless_index_offset], LinearClampSampler)),
            local_pos, 0.0).x;
    }
    return density;
}

mediump float compute_fog_density(vec3 world_pos)
{
    mediump float density = 0.0;

#if defined(SUBGROUP_OPS) && (defined(SUBGROUP_COMPUTE_FULL) || defined(SUBGROUP_SHUFFLE))
    vec3 aabb_lo = subgroupMin(world_pos);
    vec3 aabb_hi = subgroupMax(world_pos);

#if defined(SUBGROUP_COMPUTE_FULL)
    int active_lanes = int(gl_SubgroupSize);
    int bit_offset = int(gl_SubgroupInvocationID);
#else
    uvec4 ballot = subgroupBallot(true);
    int active_lanes = int(subgroupBallotBitCount(ballot));
    int bit_offset = int(subgroupBallotExclusiveBitCount(ballot));
#endif

    // Wave uniform loop
    for (int i = 0; i < fog_regions.num_regions; i += active_lanes)
    {
        int current_index = i + bit_offset;
        FogRegionParameters region;

        // Test by intersecting AABBs.
        bool active_region = false;
        if (current_index < fog_regions.num_regions)
        {
            region = fog_regions.regions[current_index];
            active_region = all(greaterThan(aabb_hi, region.world_lo.xyz)) && all(lessThan(aabb_lo, region.world_hi.xyz));
        }
        uvec4 active_ballot = subgroupBallot(active_region);

        // Wave uniform loop
        while (any(notEqual(active_ballot, uvec4(0u))))
        {
            int bit_index = int(subgroupBallotFindLSB(active_ballot));
            active_ballot &= subgroupBallot(bit_index != gl_SubgroupInvocationID);

#if defined(SUBGROUP_COMPUTE_FULL)
            int index = i + bit_index;
#else
            int index = subgroupShuffle(current_index, bit_index);
#endif

#if defined(SUBGROUP_SHUFFLE)
            // Wave uniform lane index.
            FogRegionParameters scalar_region;
            scalar_region.world_to_texture[0] = subgroupShuffle(region.world_to_texture[0], bit_index);
            scalar_region.world_to_texture[1] = subgroupShuffle(region.world_to_texture[1], bit_index);
            scalar_region.world_to_texture[2] = subgroupShuffle(region.world_to_texture[2], bit_index);
#elif defined(SUBGROUP_COMPUTE_FULL)
            FogRegionParameters scalar_region = fog_regions.regions[index];
#endif

            density += compute_fog_density(index, scalar_region, world_pos);
        }
    }
#else
    // Naive path.
    for (int i = 0; i < fog_regions.num_regions; i++)
        density += compute_fog_density(i, fog_regions.regions[i], world_pos);
#endif
    return density;
}
#else
mediump float compute_fog_density(vec3 pos)
{
    return 0.1;
}
#endif

layout(std140, set = 3, binding = 0) uniform Registers
{
    mat4 inv_view_projection;
    vec4 z_transform;
    uvec3 count;
    int dither_offset;
    vec3 inv_resolution;
    float in_scatter_strength;
    vec2 xy_scale;
    float slice_z_log2_scale;
    float density_mod;
} registers;

float to_clip_z(float world_z)
{
    vec2 zw = registers.z_transform.zw - registers.z_transform.xy * world_z;
    return zw.x / zw.y;
}

layout(rgba16f, set = 2, binding = 0) writeonly uniform image3D uLightDensity;
layout(set = 2, binding = 1) uniform mediump textureBuffer uSliceExtents;
layout(set = 2, binding = 2) uniform mediump texture2DArray uDitherLUT;

#if TEMPORAL_REPROJECTION
layout(set = 2, binding = 5) uniform mediump sampler3D uOldLightDensity;
layout(std140, set = 2, binding = 6) uniform Temporal
{
    mat4 old_view_projection;
    vec4 inv_z_transform;
};

float to_world_z(float clip_z)
{
    vec2 zw = inv_z_transform.xy * clip_z + inv_z_transform.zw;
    return -zw.x / zw.y;
}
#endif

vec3 get_world_position(vec3 uvw)
{
    float world_z = volumetric_fog_texture_z_to_world(uvw.z, registers.slice_z_log2_scale);
    float clip_z = to_clip_z(world_z);
    vec4 clip = registers.inv_view_projection * vec4(uvw.xy * 2.0 - 1.0, clip_z, 1.0);
    vec3 pos = clip.xyz / clip.w;
    return pos;
}

float get_fog_albedo(vec3 uvw)
{
    float length_mod = length(vec3(1.0, (uvw.xy * 2.0 - 1.0) * registers.xy_scale));
    float albedo = registers.density_mod * texelFetch(uSliceExtents, int(gl_GlobalInvocationID.z)).x * length_mod;
    return albedo;
}

vec3 compute_inscatter_light(vec3 pos)
{
    return compute_scatter_lighting(
        pos,
        global.camera_position,
        global.camera_front,
        directional.direction,
        directional.color);
}

#ifdef FLOOR_LIGHTING
layout(set = 2, binding = 7) uniform mediump sampler2D uFloorLight;
layout(set = 2, binding = 8, std140) uniform FloorData
{
    float pos_mod;
    float base_y;
    float y_mod;
    float scatter_mod;
} floor_lighting;

mediump vec3 compute_floor_inscatter_light(vec3 pos)
{
    vec2 uv = pos.xz * floor_lighting.pos_mod;
    mediump float y = pos.y - floor_lighting.base_y;
    y *= floor_lighting.y_mod;
    y = max(y, 0.0) + 1.0;

    mediump float lod = log2(y);
    mediump float dir_y = normalize(pos - global.camera_position).y;
    mediump float phase = 0.55 - 0.45 * dir_y;

    return textureLod(uFloorLight, uv, lod).rgb * (phase * floor_lighting.scatter_mod / (1.0 + 2.0 * lod));
}
#endif

void main()
{
#if defined(SUBGROUP_COMPUTE_FULL)
    uint local_index = gl_SubgroupID * gl_SubgroupSize + gl_SubgroupInvocationID;
    uint local_x = bitfieldExtract(local_index, 0, 1) + bitfieldExtract(local_index, 3, 1) * 2u;
    uint local_y = bitfieldExtract(local_index, 1, 1) + bitfieldExtract(local_index, 4, 1) * 2u;
    uint local_z = bitfieldExtract(local_index, 2, 1) + bitfieldExtract(local_index, 5, 1) * 2u;
    uvec3 local_coord = uvec3(local_x, local_y, local_z);
#else
    uvec3 local_coord = (uvec3(gl_LocalInvocationIndex) >> uvec3(0, 2, 4)) & 3u;
#endif
    uvec3 global_coord = gl_WorkGroupID * 4u + local_coord;

    vec3 uvw = (vec3(global_coord) + 0.5) * registers.inv_resolution;

#if TEMPORAL_REPROJECTION
    mediump vec4 old_in_scatter_light_albedo = vec4(0.0);
    bool in_bounds = false;
    vec3 undither_pos = get_world_position(uvw);
    vec4 old_clip = old_view_projection * vec4(undither_pos, 1.0);
    if (old_clip.w > 0.0)
    {
        vec3 old_ndc = old_clip.xyz / old_clip.w;
        if (all(lessThanEqual(abs(old_ndc.xy), vec2(1.0))))
        {
            if (old_ndc.z > 0.0)
            {
                float old_world_z = to_world_z(old_ndc.z);
                float tex_z = volumetric_fog_world_to_texture_z(old_world_z, registers.slice_z_log2_scale);
                old_in_scatter_light_albedo = textureLod(uOldLightDensity, vec3(0.5 * old_ndc.xy + 0.5, tex_z), 0.0);
                in_bounds = true;
            }
        }
    }
#endif

    vec3 dither = texelFetch(uDitherLUT, ivec3(global_coord.xy & 127u, registers.dither_offset), 0).xyz;
    dither.x -= 0.5;
    dither.y -= 0.5;
    dither.z = -dither.z;
    uvw += dither * registers.inv_resolution;
    uvw = clamp(uvw, vec3(0.0, 0.0, 0.001), vec3(1.0));

    vec3 pos = get_world_position(uvw);

    mediump float fog_density = compute_fog_density(pos);
    mediump float albedo = get_fog_albedo(uvw) * fog_density;
    mediump vec3 in_scatter_light = registers.in_scatter_strength * compute_inscatter_light(pos);

#ifdef FLOOR_LIGHTING
    in_scatter_light += compute_floor_inscatter_light(pos);
#endif

    // Do simplified history rejection based on the local 2x2x2 box.
    // Extract a value range.

#if TEMPORAL_REPROJECTION
#if defined(SUBGROUP_COMPUTE_FULL) && defined(SUBGROUP_OPS)
    float l = dot(in_scatter_light, vec3(0.3, 0.6, 0.1));
    float m2 = subgroupClusteredAdd(l * l, 8) / 8.0;
    float m1 = subgroupClusteredAdd(l, 8) / 8.0;

    // If variance is low, converge quickly.
    // If variance is high, converge slowly.

    mediump float w = 1.0;
    if (in_bounds)
    {
        float var = max(m2 - m1 * m1, 0.0);
        float stddev = sqrt(var);
        m1 = max(m1, 0.000001);
        w = 0.5 - 0.5 * (31.0 / 32.0) * smoothstep(m1 * 0.1, m1 * 0.5, stddev);
    }
#endif

    in_scatter_light = mix(old_in_scatter_light_albedo.rgb, in_scatter_light, w);
    albedo = mix(old_in_scatter_light_albedo.w, albedo, w);
    // Avoid albedo hitting infinity, since it will trigger NaN later in the pipeline.
    // i.e. exp2(-inf) * inf == NaN.
    albedo = clamp(albedo, 0.0, 10000.0);
#endif

    if (all(lessThan(global_coord, registers.count)))
        imageStore(uLightDensity, ivec3(global_coord), vec4(in_scatter_light, albedo));
}
