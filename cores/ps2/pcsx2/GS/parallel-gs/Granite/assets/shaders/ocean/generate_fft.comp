#version 450
layout(local_size_x = 64) in;

layout(constant_id = 0) const int NUM_FREQ_BANDS = 8;

#if FREQ_BAND_MODULATION
layout(std140, set = 1, binding = 0) uniform FreqBands
{
    vec4 freq_bands[NUM_FREQ_BANDS / 4];
};
#endif

layout(std430, set = 0, binding = 0) readonly buffer InputDistribution
{
    vec2 distribution[];
};

layout(std430, set = 0, binding = 1) writeonly buffer OutputFFT
{
    uint fft_input[];
};

layout(std430, push_constant) uniform Registers
{
    vec2 mod_factor;
    uvec2 N;
    float freq_to_band_mod;
    float time;
    float period;
} registers;

vec2 alias(vec2 i, vec2 N)
{
    return mix(i, i - N, greaterThan(i, 0.5 * registers.N));
}

vec2 cmul(vec2 a, vec2 b)
{
    vec2 r3 = a.yx;
    vec2 r1 = b.xx;
    vec2 R0 = a * r1;
    vec2 r2 = b.yy;
    vec2 R1 = r2 * r3;
    return R0 + vec2(-R1.x, R1.y);
}

#if FREQ_BAND_MODULATION
float freq_to_band_amplitude(vec2 aliased_freq)
{
    vec2 F = aliased_freq * registers.freq_to_band_mod;
    float band = max(F.x, F.y);
    band = clamp(band, 0.0, float(NUM_FREQ_BANDS) - 1.001);

    int low_band = int(band);
    float lo = freq_bands[low_band >> 2][low_band & 3];
    low_band++;
    float hi = freq_bands[low_band >> 2][low_band & 3];
    return mix(lo, hi, fract(band));
}
#endif

void main()
{
    uvec2 i = gl_GlobalInvocationID.xy;
    uvec2 wi = (registers.N - i) & (registers.N - 1u);

    vec2 a = distribution[i.y * registers.N.x + i.x];
    vec2 b = distribution[wi.y * registers.N.x + wi.x];

    vec2 aliased_freq = alias(vec2(i), vec2(registers.N));
#if FREQ_BAND_MODULATION
    float band_amplitude = freq_to_band_amplitude(aliased_freq);
#endif

    vec2 k = registers.mod_factor * aliased_freq;
    float k_len = length(k);

    const float G = 9.81;
    // Ensures that we can wrap time to avoid FP rounding errors for very large values of registers.time.
    float angular_velocity = sqrt(G * k_len);
    angular_velocity = round(angular_velocity * registers.period) / registers.period;
    float w = angular_velocity * registers.time;

    float cw = cos(w);
    float sw = sin(w);

    a = cmul(a, vec2(cw, sw));
    b = cmul(b, vec2(cw, sw));
    b = vec2(b.x, -b.y);
    vec2 res = a + b;

#if defined(GRADIENT_NORMAL)
    vec2 grad = cmul(res, vec2(-k.y, k.x));
    res = grad;
#elif defined(GRADIENT_DISPLACEMENT)
    vec2 grad = cmul(res, vec2(-k.y / (k_len + 0.00001), k.x / (k_len + 0.00001)));
    res = grad;
#endif

#if FREQ_BAND_MODULATION
    res *= band_amplitude;
#endif
    fft_input[i.y * registers.N.x + i.x] = packHalf2x16(res);
}
