#version 450
#extension GL_EXT_mesh_shader : require
#extension GL_ARB_shader_draw_parameters : require

out gl_MeshPerVertexEXT
{
    invariant vec4 gl_Position;
} gl_MeshVerticesEXT[];

#extension GL_KHR_shader_subgroup_basic : require
#if defined(MESHLET_PRIMITIVE_CULL_WAVE32) && MESHLET_PRIMITIVE_CULL_WAVE32
#extension GL_KHR_shader_subgroup_shuffle : require
#extension GL_KHR_shader_subgroup_ballot : require
#extension GL_KHR_shader_subgroup_arithmetic : require
#endif

#ifndef MESHLET_SIZE
#error "Must define MESHLET_SIZE"
#endif

layout(max_primitives = MESHLET_SIZE, max_vertices = MESHLET_SIZE, triangles) out;
layout(local_size_x = 32, local_size_y_id = 0) in;

#include "meshlet_payload_constants.h"

#define MESHLET_PAYLOAD_DESCRIPTOR_SET 0
#define MESHLET_PAYLOAD_META_BINDING 0
#define MESHLET_PAYLOAD_STREAM_BINDING 1
#define MESHLET_PAYLOAD_PAYLOAD_BINDING 2
#include "meshlet_payload_decode.h"
#include "meshlet_attribute_decode.h"
#include "meshlet_render_types.h"

#if MESHLET_LOCAL_INVOCATION_INDEXED
#define MESHLET_PRIMITIVE_CULL_SHARED_INDEX shared_indices
shared uint shared_indices[MESHLET_SIZE];
shared u8vec4 shared_nt[MESHLET_SIZE];
shared bool shared_t_sign[MESHLET_SIZE];
shared int shared_exponent[MESHLET_SIZE];
shared i16vec2 shared_uv[MESHLET_SIZE];
shared vec4 shared_clip_pos[MESHLET_SIZE];
#endif

#include "meshlet_primitive_cull.h"

layout(location = 0) out vec3 vNormal[];
layout(location = 1) out vec4 vTangent[];
layout(location = 2) out vec2 vUV[];
layout(location = 3) perprimitiveEXT out uint vDrawID[];

layout(set = 1, binding = 0) uniform UBO
{
    mat4 VP;
};

layout(set = 1, binding = 2) uniform UBOViewport
{
    vec4 viewport;
};

#ifdef MESHLET_RENDER_TASK_HIERARCHICAL
taskPayloadSharedEXT CompactedDrawInfoPayload mesh_payload;
#else
layout(set = 0, binding = 4, std430) readonly buffer CompactedDraws
{
    CompactedDrawInfo infos[];
} mesh_payload;
#endif

layout(set = 0, binding = 5, std430) readonly buffer Transforms
{
    mat4 data[];
} transforms;

layout(set = 0, binding = 10) buffer Stats
{
    uint invocations;
    uint prim;
    uint vert;
} stats;

const uint STRIDE = 4; // TODO: Spec constant or push constant

void main()
{
    uint compacted_meshlet_index = meshlet_get_meshlet_index();
#ifndef MESHLET_RENDER_TASK_HIERARCHICAL
    compacted_meshlet_index += 0x8000 * gl_DrawIDARB;
#endif

#if defined(MESHLET_RENDER_TASK_HIERARCHICAL) && !MESHLET_RENDER_TASK_HIERARCHICAL
    CompactedDrawInfo task = mesh_payload.info;
    task.meshlet_index += uint(mesh_payload.offsets[compacted_meshlet_index]);
#else
    CompactedDrawInfo task = mesh_payload.infos[compacted_meshlet_index];
#endif

    mat4 M = transforms.data[task.node_offset];

    uint linear_index, sublet_index;
    if (gl_SubgroupSize == 32)
    {
        linear_index = gl_SubgroupInvocationID;
        sublet_index = gl_SubgroupID;
    }
    else
    {
        linear_index = gl_LocalInvocationID.x;
        sublet_index = gl_LocalInvocationID.y;
    }

    meshlet_setup_local_invocation(uvec2(linear_index, sublet_index));
    MeshletMetaRuntime meta = meshlet_metas_runtime.data[task.meshlet_index];
    meta.stream_offset += STRIDE * meshlet_get_sublet_index(sublet_index);

    MeshletInfo info = meshlet_get_meshlet_info(meta.stream_offset);
    uvec3 decoded_index_buffer = uvec3(0);
    vec3 world_pos;
    vec4 clip_pos = vec4(-1.0);

    if (linear_index < info.primitive_count)
        decoded_index_buffer = meshlet_decode_index_buffer(meta.stream_offset, linear_index);

    if (linear_index < info.vertex_count)
    {
        int exponent;
        i16vec3 ipos = meshlet_decode_snorm_scaled_i16x3(
            meta.stream_offset + MESHLET_STREAM_TYPE_POSITION,
            linear_index, exponent);
        vec3 pos = ldexp(vec3(ipos), ivec3(exponent));
        world_pos = (M * vec4(pos, 1.0)).xyz;
        clip_pos = VP * vec4(world_pos, 1.0);
    }

    meshlet_emit_primitive(decoded_index_buffer, clip_pos, viewport);

    if (meshlet_lane_has_active_vert())
    {
        uint out_vert_index = meshlet_compacted_vertex_output();

        int exponent;
        bool t_sign;
        u8vec4 nt = meshlet_decode_normal_tangent_oct8(
                meta.stream_offset + MESHLET_STREAM_TYPE_NORMAL_TANGENT_OCT8,
                linear_index, t_sign);
        i16vec2 uv = meshlet_decode_snorm_scaled_i16x2(
                meta.stream_offset + MESHLET_STREAM_TYPE_UV,
                linear_index, exponent);

#ifdef MESHLET_PRIMITIVE_CULL_SHARED_INDEX
        shared_clip_pos[out_vert_index] = clip_pos;
        shared_uv[out_vert_index] = uv;
        shared_nt[out_vert_index] = nt;
        shared_exponent[out_vert_index] = exponent;
#else
        gl_MeshVerticesEXT[out_vert_index].gl_Position = clip_pos;
        vUV[out_vert_index] = attribute_decode_snorm_exp_uv(uv, exponent);
        mediump mat2x4 NT = attribute_decode_oct8_normal_tangent(nt, t_sign);
        vNormal[out_vert_index] = mat3(M) * NT[0].xyz;
        vTangent[out_vert_index] = vec4(mat3(M) * NT[1].xyz, NT[1].w);
#endif
    }

#ifdef MESHLET_PRIMITIVE_CULL_SHARED_INDEX
    barrier();
    if (gl_LocalInvocationIndex < shared_active_vert_count_total)
    {
        i16vec2 uv = shared_uv[gl_LocalInvocationIndex];
        int exponent = shared_exponent[gl_LocalInvocationIndex];
        u8vec4 nt = shared_nt[gl_LocalInvocationIndex];
        bool t_sign = shared_t_sign[gl_LocalInvocationIndex];

        gl_MeshVerticesEXT[gl_LocalInvocationIndex].gl_Position = shared_clip_pos[gl_LocalInvocationIndex];
        vUV[gl_LocalInvocationIndex] = attribute_decode_snorm_exp_uv(uv, exponent);
        mediump mat2x4 NT = attribute_decode_oct8_normal_tangent(nt, t_sign);
        vNormal[gl_LocalInvocationIndex] = mat3(M) * NT[0].xyz;
        vTangent[gl_LocalInvocationIndex] = vec4(mat3(M) * NT[1].xyz, NT[1].w);
    }
#endif

    if (gl_LocalInvocationIndex < shared_active_prim_count_total)
    {
#ifdef MESHLET_PRIMITIVE_CULL_SHARED_INDEX
	    gl_PrimitiveTriangleIndicesEXT[gl_LocalInvocationIndex] = uvec3(unpack8(shared_indices[gl_LocalInvocationIndex]).xyz);
#endif
        vDrawID[gl_LocalInvocationIndex] = task.meshlet_index;
    }

#if 0
    if (gl_LocalInvocationIndex == 0)
    {
        atomicAdd(stats.invocations, gl_WorkGroupSize.x * gl_WorkGroupSize.y);
        atomicAdd(stats.prim, shared_active_prim_count_total);
        atomicAdd(stats.vert, shared_active_vert_count_total);
    }
#endif
}
